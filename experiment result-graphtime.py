import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as co


def mean(data):
    """Return the sample arithmetic mean of data."""
    n = len(data)
    if n < 1:
        raise ValueError('mean requires at least one data point')
    return sum(data)/n # in Python 2 use sum(data)/float(n)

def _ss(data):
    """Return sum of square deviations of sequence data."""
    c = mean(data)
    ss = sum((x-c)**2 for x in data)
    return ss

def pstdev(data):
    """Calculates the population standard deviation."""
    n = len(data)
    if n < 2:
        raise ValueError('variance requires at least two data points')
    ss = _ss(data)
    pvar = ss/n # the population variance
    return pvar**0.5



#data
x= [[2,3],[2,3,4],[2,3,4,5],[2,3,4,5,6]]


out_bot_up = [
[0.189,0.038,0.044,0.055,],
[0.008,0.024,0.067,0.139,0.28,],
[0.025,0.02,0.026,0.037,0.074,],
[0.002,0.003,0.002,0.002,],
[0.003,0.006,0.013,0.035,0.088,],
[0.004,0.006,0.016,0.054,0.218,],
[0.007,0.062,1.573,32.505,1281.039,],
[0.008,0.106,4.170,281.258,13972.504,],
[0.013,0.14,4.300,274.311,15082.206,],
[0.004,0.023,0.198,3.253,38.160,],
[0.002,0.009,0.076,1.319,5.316,],
[0.022,0.148,1.369,29.006,557.459,],
[0.12,0.336,1.554,10.284,118.016,],
[0.003,0.003,0.004,],
[0.001,0.001,0.001,0.002,],
[0.013,0.026,0.136,1.565,5.303,],
[0.004,0.034,0.882,27.215,738.436,],
[0.04,0.473,13.232,467.072,11869.332,],
[0.002,0.002,0.006,0.018,0.045,],
[0.001,0.003,0.009,0.038,0.113,],
[0.002,0.007,0.057,0.579,4.032,],
[0.012,0.328,22.229,3292.153,],
[0.041,5.258,2836.460,],
[0.03,5.057,3425.474,],
[0.003,0.059,2.025,160.256,5423.175,],
[0.322,1.031,303.280,54850.439,],
[0.09,1.163,168.271,22569.321,],
[0.019,0.079,0.317,2.368,58.068,],
[0.009,0.408,5.419,559.105,],
[0.067,8.083,7841.159,],
[0.016,0.417,30.182,2938.575,],
[0.004,0.014,0.187,4.479,58.087,],
[0.043,2.010,1133.550,],
[0.01,0.193,7.224,464.000,],
[0.067,5.328,3588.358,],
[0.021,1.219,451.144,68964.435,],
[0.038,4.460,2031.439,],
[0.028,2.202,890.036,],
[0.014,1.015,177.071,28477.234,],
[0.016,0.18,10.071,1127.280,],
[0.028,0.77,48.008,5142.427,],
[0.03,3.511,1722.416,],
[0.031,4.138,2612.166,],
[0.077,13.158,14861.476,],
[0.058,9.380,6574.012,],
[0.014,0.776,82.108,12454.474,],
[0.011,0.458,38.067,4965.436,],
[0.002,0.01,0.134,1.475,22.374,],
[0.024,2.545,992.484,],
[0.027,4.169,2270.247,],
[0.016,0.851,152.020,25917.219,],
[0.007,0.227,15.272,2419.007,],
[0.08,24.226,15576.015,],
[0.022,2.208,1047.467,],
[0.009,0.333,32.437,2974.020,],
]

out_top_down = [
[0.041,0.075,0.203,0.172,],
[0.005,0.026,0.14,0.746,0.552,],
[0.022,0.046,0.06,0.089,0.097,],
[0.002,0.002,0.002,0.003,],
[0.038,0.766,3.497,13.844,0.128,],
[0.017,0.124,3.7,25.702,0.277,],
[0.26,4.822,1.716,],
[1.242,24.907,5.232,],
[1109.639,0.184,],
[3.533,0.028,],
[0.146,40.805,82.261,1.133,],
[0.199,32.527,354.299,30.696,],
[109.059,1158.584,1.546,],
[0.003,0.003,0.004,],
[0.164,0.181,0.185,0.002,],
[1.137,13.267,35.628,1.124,],
[3.06,0.041,],
[18.666,0.536,],
[0.01,0.256,0.293,0.397,0.043,],
[0.544,8.85,21.804,51.049,0.109,],
[0.124,4.658,112.642,387.425,5.128,],
[0.833,42.754,26.461,],
[0.738,17.511,3728.341,],
[0.92,25.785,4224.439,],
[0.022,0.655,21.826,314.715,7019.531,],
[2.624,84.99,387.032,],
[1.218,106.996,1285.831,27386.426,],
[0.026,0.732,6.863,29.991,86.581,],
[0.163,3.401,36.388,739.536,],
[5.909,334.57,9746.515,],
[0.637,20.657,139.465,3794.366,],
[0.004,0.021,0.274,3.791,51.554,],
[2.498,122.484,1378.519,],
[0.045,0.952,16.906,591.422,],
[9.34,216.36,4424.485,],
[6.475,135.139,530.214,],
[7.874,93.197,2944.278,],
[0.921,33.879,1344.260,],
[1.055,31.739,218.562,],
[0.985,64.737,399.417,1322.331,],
[0.75,13.757,150.687,7466.121,],
[2.503,101.81,2123.275,],
[2.71,232.172,3452.056,],
[5.619,436.52,18758.388,],
[9.256,640.04,9105.560,],
[1.171,21.03,120.064,],
[0.652,36.25,354.086,7223.053,],
[0.012,0.14,1.425,7.209,39.534,],
[3.485,172.262,1533.089,],
[6.357,363.152,2981.141,],
[1.429,24.812,289.102,],
[0.716,12.925,22.301,],
[7.068,631.988,19065.435,],
[0.609,17.58,1325.182,],
[0.237,12.258,99.892,3926.175,],
]


out_issta = [
[0.19366666666666665,0.31233333333333335,0.209,0.336,0.218,],
[0.09666666666666666,0.116,0.16433333333333333,0.30733333333333335,0.531,],
[0.24866666666666667,0.28633333333333333,0.21866666666666665,0.5313333333333334,0.7193333333333333,],
[0.09900000000000002,0.105,0.18233333333333335,0.09166666666666667],
[0.215,0.26599999999999996,0.22866666666666666,0.5256666666666667,0.6356666666666667,],
[0.09900000000000002,0.15633333333333335,0.219,0.375,0.872,],
[0.104,0.20299999999999999,1.6563333333333332,38.39066666666667,1113.22,],
[0.10433333333333333,0.25,4.901333333333333,319.781,],
[0.16166666666666665,0.6689999999999999,12.241,],
[0.073,0.16133333333333333,0.47933333333333333,4.542000000000001,43.531,],
[0.07766666666666668,0.11433333333333333,0.21866666666666668,1.391,6.343,],
[0.151,0.25,1.7606666666666666,28.56233333333334,564.407,],
[0.19800000000000004,0.4063333333333334,1.8023333333333333,11.458666666666668,118.907,],
[0.083,0.08333333333333333,0.08333333333333333],
[0.09933333333333333,0.09466666666666668,0.12533333333333332,0.162],
[0.11466666666666665,0.19266666666666668,0.33866666666666667,1.4116666666666668,6.203,],
[0.08833333333333333,0.20833333333333334,1.5156666666666665,27.24466666666667,694.767,],
[0.20333333333333334,0.7503333333333333,13.515333333333333,408.2873333333334,10365.861,],
[0.08333333333333333,0.068,0.09400000000000001,0.135,0.204,],
[0.08333333333333333,0.078,0.11499999999999999,0.20299999999999999,0.453,],
[0.09300000000000001,0.16766666666666666,0.36633333333333334,1.1783333333333335,6.705,],
[0.20866666666666667,0.8576666666666667,38.624,],
[0.32433333333333336,8.59,],
[0.27899999999999997,7.581,],
[0.1376666666666667,0.314,3.5683333333333334,172.615,],
[0.24633333333333332,2.099,487.6960000000001,65022.953,],
[0.24,1.342666666666667,225.38699999999997,21576.635,],
[0.102,0.20766666666666667,0.5369999999999999,3.4186666666666667,59.264,],
[0.17200000000000001,0.456,8.901,],
[0.33666666666666667,12.199,],
[0.222,0.786,42.935,],
[0.10266666666666667,0.22733333333333336,0.4693333333333333,3.25,47.311,],
[0.29,3.6126666666666662,1099.241,],
[0.19099999999999998,0.49866666666666665,9.425333333333333,427.464,],
[0.36233333333333334,7.438666666666666,3614.553,],
[0.2733333333333334,2.219,542.0163333333334,74232.261,],
[0.33099999999999996,5.818,],
[0.27899999999999997,3.5549999999999997,1119.214,],
[0.215,1.604,268.145,30080.795,],
[0.20566666666666666,0.5586666666666668,15.044333333333332,1257.0743333333332,50753.11,],
[0.25866666666666666,1.0166666666666666,77.44933333333334,5547.419,],
[0.31466666666666665,4.422666666666667,1749.826,],
[0.29833333333333334,5.6129999999999995,2585.677,],
[0.451,20.284,],
[0.39166666666666666,11.815666666666667,7519.833,],
[0.27399999999999997,1.4256666666666666,156.37699999999998,13702.742,],
[0.22599999999999998,0.9063333333333334,70.165,5452.852,],
[0.10166666666666667,0.21566666666666667,0.46166666666666667,2.6073333333333335,33.104,],
[0.2786666666666667,3.736666666666667,1283.69,],
[0.3013333333333333,5.778,],
[0.246,1.465,237.55466666666666,26306.222,],
[0.19066666666666668,0.616,27.589333333333332,2709.742,],
[0.39333333333333337,18.328333333333333,17014.554,],
[0.27666666666666667,3.524,],
[0.21766666666666667,0.809,50.609,],
]

out1 = []
out2 = []
out3 = []
for i in range(0, 55):
    tempout1=[]
    tempout2=[]
    tempout3=[]
    for j in range(0, 5):
        temp = []
        temp2 = []
        for k in range(0, 3):
            if (len(out_bot_up[i]) > j):
                temp.append(out_bot_up[i][j])
                temp2.append(out_bot_up[i][j])
            else:
                temp.append(0)
            if (len(out_top_down[i]) > j):
                temp.append(out_top_down[i][j])
                temp2.append(out_top_down[i][j])
            else:
                temp.append(0)
            if (len(out_issta[i]) > j):
                temp.append(out_issta[i][j])
                temp2.append(out_issta[i][j])
            else:
                temp.append(0)
                
        if not temp[0] == 0:
            tempout1.append(float(temp[0])/(max(temp2) + 0.001))
        if not temp[1] == 0:
            tempout2.append(float(temp[1])/(max(temp2) + 0.001))
        if not temp[2] == 0:
            tempout3.append(float(temp[2])/(max(temp2) + 0.001))
    out1.append(tempout1)
    out2.append(tempout2)
    out3.append(tempout3)


fig = plt.figure(figsize=(15, 22))

#define subplots 3x6
# 1        2    3 
# 4        5    6
# 7        8    9
# 10    11    12
# 13    14    15
# 16    17    18

ax = []
ax1 = []
ax2 = []

for i in range(1, 56):
     ax.append(fig.add_subplot(11, 5, i))
     ax1.append(fig.add_subplot(11, 5, i, sharex=ax[i-1], sharey=ax[i-1], frameon=False) )
     ax2.append(fig.add_subplot(11, 5, i, sharex=ax[i-1], sharey=ax[i-1], frameon=False) )

fig.tight_layout()
fig.text(0.5, 0.04, 'Degree', ha='center', fontsize=15)
fig.text(0.02, 0.5, 'Time (normalized)', va='center', rotation='vertical', fontsize=15)

#plot data and normalized data
xx = x[len(out1[0])-2]
line_up, = ax[0].plot(xx, out1[0],  marker="o", mfc="None", color="k")
xx = x[len(out2[0])-2]
line_down, = ax1[0].plot(xx, out2[0], ls="--", marker="s",   color="k")
xx = x[len(out3[0])-2]
line_issta, = ax2[0].plot(xx, out3[0], ls=":", marker="x",   mfc="None", color="k")

for i in range(1, 55):
    xx = x[len(out1[i])-2]
    ax[i].plot(xx, out1[i],  marker="o", mfc="None", color="k")
    xx = x[len(out2[i])-2]
    ax1[i].plot(xx, out2[i], ls="--", marker="s",  color="k")
    xx = x[len(out3[i])-2]
    ax1[i].plot(xx, out3[i], ls=":", marker="x",  mfc="None", color="k")


#configure legend
fig.legend([line_up, line_down, line_issta], ['bottom-up', 'top-down', 'traditional'],'upper left',
           ncol=3,prop={'size':10})



for i in range (0, 55):
    ax[i].set_xlim(2, 6)
    ax[i].set_xticks(np.arange(2, 7, 1))
    ax[i].set_xticklabels(['2','3','4','5','6'])
    ax[i].set_ylim(0, 1.05)
    ax[i].set_yticks(np.arange(0, 1.05, 0.2))


models1 =['Banking1','Banking2','CommProtocol','Concurrency','Healthcare1','Healthcare2','Healthcare3','Healthcare4','Insurance','NetworkMgmt','ProcessorComm1','ProcessorComm2','Services','Storage1','Storage2','Storage3','Storage4','Storage5','SystemMgmt','Telecom']

models2 =['SPIN-S','SPIN-V','GCC','Apache','Bugzilla',]

for i in range (0, 20):
    ax[i].set_title(models1[i], fontsize=12)

for i in range (20, 25):
    ax[i].set_title(models2[i-20], fontsize=12)

for i in range (25, 55):
    ax[i].set_title('Syn' + str(i-24), fontsize=12)

#configure axis

#123
#ax1.set_ylim(0.7, 1.05)


#ax1.set_yticks(np.arange(0.7, 1.05, 0.1))


#hide Y tick labels for some plots(only plots on the left and right have labels and ticklabels
##ax2.set_yticklabels([]) 
##ax3.set_yticklabels([])

#ax1.set_xlim(2, 6)

#ax1.set_xticks(np.arange(2, 6, 1))

#ax1.set_xticklabels(['2','3','4','5','6'])

#ax3.yaxis.tick_left()




#set Y labels
#ax3.set_xlabel(r"$SUT_{1}$")

#set X labels

#ax3.set_ylabel(r"$2-way\ to\ 5-way$")

#adjust plot spacing
plt.subplots_adjust(left=0.07, bottom=0.11, right=0.97, top=0.95, wspace=0.25, hspace=0.55)

#finally draw the plot
plt.show()
