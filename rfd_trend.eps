%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: figureT_r.pdf
%%Creator: Adobe Acrobat 11.0.0
%%For: xintao
%%CreationDate: 2017/12/8, 15:38:00
%%BoundingBox: 0 0 731 299
%%HiResBoundingBox: 0 0 730.8000 298.8000
%%CropBox: 0 0 730.8000 298.8000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 565 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2017-12-08T15:37:37+08:00"
   xmp:CreatorTool="matplotlib 1.4.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -298.8 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 298.8 li
730.8 298.8 li
730.8 0 li
cp
clp
gsave
0 298.8 mo
731 298.8 li
731 -.200012 li
0 -.200012 li
cp
clp
0 298.8 mo
730.8 298.8 li
730.8 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
58.464 265.932 mo
708.876 265.932 li
708.876 29.88 li
58.464 29.88 li
cp
f
gsave
58.464 265.932 mo
708.876 265.932 li
708.876 29.88 li
58.464 29.88 li
cp
clp
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
58.464 133.849 mo
221.067 156.802 li
383.67 91.7776 li
546.273 104.867 li
708.876 29.88 li
1 /0 /CSD get_res sepcs
1 sep
@
gsave
55.214 137.099 mo
61.714 137.099 li
61.714 130.599 li
55.214 130.599 li
cp
clp
.5 lw
0 lc
58.464 136.849 mo
59.2596 136.849 60.0227 136.533 60.5853 135.97 cv
61.1479 135.408 61.464 134.645 61.464 133.849 cv
61.464 133.053 61.1479 132.29 60.5853 131.728 cv
60.0227 131.165 59.2596 130.849 58.464 130.849 cv
57.6684 130.849 56.9053 131.165 56.3427 131.728 cv
55.7801 132.29 55.464 133.053 55.464 133.849 cv
55.464 134.645 55.7801 135.408 56.3427 135.97 cv
56.9053 136.533 57.6684 136.849 58.464 136.849 cv
cp
@
grestore
gsave
217.817 160.052 mo
224.317 160.052 li
224.317 153.552 li
217.817 153.552 li
cp
clp
.5 lw
0 lc
221.067 159.802 mo
221.863 159.802 222.626 159.486 223.188 158.923 cv
223.751 158.361 224.067 157.598 224.067 156.802 cv
224.067 156.006 223.751 155.243 223.188 154.681 cv
222.626 154.118 221.863 153.802 221.067 153.802 cv
220.271 153.802 219.508 154.118 218.946 154.681 cv
218.383 155.243 218.067 156.006 218.067 156.802 cv
218.067 157.598 218.383 158.361 218.946 158.923 cv
219.508 159.486 220.271 159.802 221.067 159.802 cv
cp
@
grestore
gsave
380.42 95.0276 mo
386.92 95.0276 li
386.92 88.5276 li
380.42 88.5276 li
cp
clp
.5 lw
0 lc
383.67 94.7776 mo
384.466 94.7776 385.229 94.4615 385.791 93.8989 cv
386.354 93.3364 386.67 92.5732 386.67 91.7776 cv
386.67 90.982 386.354 90.2189 385.791 89.6563 cv
385.229 89.0937 384.466 88.7776 383.67 88.7776 cv
382.874 88.7776 382.111 89.0937 381.549 89.6563 cv
380.986 90.2189 380.67 90.982 380.67 91.7776 cv
380.67 92.5732 380.986 93.3364 381.549 93.8989 cv
382.111 94.4615 382.874 94.7776 383.67 94.7776 cv
cp
@
grestore
gsave
543.023 108.117 mo
549.523 108.117 li
549.523 101.617 li
543.023 101.617 li
cp
clp
.5 lw
0 lc
546.273 107.867 mo
547.069 107.867 547.832 107.551 548.394 106.989 cv
548.957 106.426 549.273 105.663 549.273 104.867 cv
549.273 104.072 548.957 103.309 548.394 102.746 cv
547.832 102.183 547.069 101.867 546.273 101.867 cv
545.477 101.867 544.714 102.183 544.152 102.746 cv
543.589 103.309 543.273 104.072 543.273 104.867 cv
543.273 105.663 543.589 106.426 544.152 106.989 cv
544.714 107.551 545.477 107.867 546.273 107.867 cv
cp
@
grestore
gsave
705.626 33.13 mo
712.126 33.13 li
712.126 26.63 li
705.626 26.63 li
cp
clp
.5 lw
0 lc
708.876 32.88 mo
709.672 32.88 710.435 32.5639 710.997 32.0013 cv
711.56 31.4387 711.876 30.6756 711.876 29.88 cv
711.876 29.0844 711.56 28.3213 710.997 27.7587 cv
710.435 27.1961 709.672 26.88 708.876 26.88 cv
708.08 26.88 707.317 27.1961 706.755 27.7587 cv
706.192 28.3213 705.876 29.0844 705.876 29.88 cv
705.876 30.6756 706.192 31.4387 706.755 32.0013 cv
707.317 32.5639 708.08 32.88 708.876 32.88 cv
cp
@
grestore
grestore
1 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
58.464 265.932 mo
58.464 29.88 li
1 /0 /CSD get_res sepcs
1 sep
@
708.876 265.932 mo
708.876 29.88 li
@
58.464 29.88 mo
708.876 29.88 li
@
58.464 265.932 mo
708.876 265.932 li
@
58.464 265.932 mo
58.464 261.932 li
f
.5 lw
0 lc
1 lj
58.464 265.932 mo
58.464 261.932 li
@
58.464 29.88 mo
58.464 33.88 li
f
58.464 29.88 mo
58.464 33.88 li
@
43.2602 278.061 mo
47.3882 278.061 li
47.3882 279.057 li
41.8322 279.057 li
41.8322 278.061 li
42.2762 277.605 42.8882 276.981 43.6682 276.189 cv
44.4362 275.409 44.9282 274.905 45.1322 274.677 cv
45.5162 274.257 45.7802 273.897 45.9242 273.597 cv
46.0682 273.309 46.1522 273.009 46.1522 272.721 cv
46.1522 272.265 45.9842 271.881 45.6602 271.593 cv
45.3362 271.305 44.9162 271.149 44.3882 271.149 cv
44.0162 271.149 43.6202 271.221 43.2122 271.341 cv
42.8042 271.473 42.3602 271.665 41.8922 271.929 cv
41.8922 270.729 li
42.3722 270.537 42.8162 270.393 43.2242 270.297 cv
43.6322 270.201 44.0162 270.153 44.3642 270.153 cv
45.2642 270.153 45.9842 270.381 46.5242 270.837 cv
47.0642 271.293 47.3402 271.893 47.3402 272.649 cv
47.3402 273.009 47.2682 273.357 47.1362 273.669 cv
47.0042 273.993 46.7642 274.377 46.4042 274.809 cv
46.3082 274.929 45.9962 275.253 45.4682 275.793 cv
44.9402 276.333 44.2082 277.089 43.2602 278.061 cv
f
49.1762 275.289 mo
52.3322 275.289 li
52.3322 276.249 li
49.1762 276.249 li
49.1762 275.289 li
f
53.4241 272.493 mo
54.5041 272.493 li
55.8481 277.617 li
57.1921 272.493 li
58.4641 272.493 li
59.8081 277.617 li
61.1521 272.493 li
62.2321 272.493 li
60.5161 279.057 li
59.2441 279.057 li
57.8281 273.681 li
56.4121 279.057 li
55.1401 279.057 li
53.4241 272.493 li
f
66.852 275.757 mo
65.976 275.757 65.376 275.865 65.04 276.057 cv
64.704 276.261 64.536 276.597 64.536 277.077 cv
64.536 277.461 64.656 277.773 64.908 277.989 cv
65.16 278.217 65.508 278.325 65.94 278.325 cv
66.54 278.325 67.02 278.121 67.38 277.689 cv
67.74 277.269 67.92 276.705 67.92 275.997 cv
67.92 275.757 li
66.852 275.757 li
69 275.313 mo
69 279.057 li
67.92 279.057 li
67.92 278.061 li
67.668 278.469 67.356 278.757 66.996 278.937 cv
66.636 279.117 66.18 279.213 65.652 279.213 cv
64.98 279.213 64.44 279.033 64.044 278.661 cv
63.648 278.289 63.456 277.785 63.456 277.149 cv
63.456 276.417 63.696 275.865 64.2 275.481 cv
64.692 275.109 65.424 274.917 66.408 274.917 cv
67.92 274.917 li
67.92 274.809 li
67.92 274.317 67.752 273.933 67.428 273.657 cv
67.104 273.393 66.648 273.249 66.06 273.249 cv
65.676 273.249 65.316 273.297 64.956 273.393 cv
64.596 273.489 64.26 273.621 63.936 273.789 cv
63.936 272.793 li
64.32 272.649 64.704 272.529 65.076 272.457 cv
65.448 272.385 65.808 272.337 66.168 272.337 cv
67.116 272.337 67.824 272.589 68.292 273.081 cv
68.76 273.573 69 274.317 69 275.313 cv
f
73.9561 279.657 mo
73.6441 280.425 73.3441 280.941 73.0561 281.181 cv
72.7681 281.421 72.3841 281.541 71.9041 281.541 cv
71.0401 281.541 li
71.0401 280.641 li
71.6761 280.641 li
71.9641 280.641 72.1921 280.569 72.3601 280.425 cv
72.5281 280.281 72.7081 279.957 72.9121 279.429 cv
73.1041 278.949 li
70.4521 272.493 li
71.5921 272.493 li
73.6441 277.629 li
75.6961 272.493 li
76.8361 272.493 li
73.9561 279.657 li
f
221.067 265.932 mo
221.067 261.932 li
f
221.067 265.932 mo
221.067 261.932 li
@
221.067 29.88 mo
221.067 33.88 li
f
221.067 29.88 mo
221.067 33.88 li
@
208.455 274.341 mo
209.019 274.461 209.463 274.713 209.775 275.097 cv
210.087 275.481 210.255 275.961 210.255 276.513 cv
210.255 277.377 209.955 278.049 209.367 278.517 cv
208.767 278.985 207.927 279.213 206.835 279.213 cv
206.463 279.213 206.079 279.177 205.695 279.105 cv
205.311 279.045 204.903 278.937 204.495 278.793 cv
204.495 277.653 li
204.819 277.845 205.179 277.989 205.575 278.085 cv
205.959 278.181 206.367 278.229 206.799 278.229 cv
207.543 278.229 208.107 278.085 208.491 277.797 cv
208.875 277.509 209.079 277.077 209.079 276.513 cv
209.079 276.009 208.899 275.601 208.539 275.313 cv
208.179 275.025 207.675 274.869 207.027 274.869 cv
206.007 274.869 li
206.007 273.897 li
207.075 273.897 li
207.651 273.897 208.095 273.789 208.407 273.549 cv
208.719 273.321 208.875 272.985 208.875 272.541 cv
208.875 272.097 208.707 271.749 208.395 271.509 cv
208.071 271.269 207.615 271.149 207.027 271.149 cv
206.703 271.149 206.355 271.185 205.983 271.257 cv
205.611 271.329 205.203 271.437 204.759 271.581 cv
204.759 270.525 li
205.203 270.405 205.623 270.309 206.019 270.249 cv
206.403 270.189 206.775 270.153 207.135 270.153 cv
208.023 270.153 208.731 270.357 209.259 270.765 cv
209.787 271.173 210.051 271.725 210.051 272.421 cv
210.051 272.901 209.907 273.309 209.631 273.645 cv
209.355 273.981 208.959 274.221 208.455 274.341 cv
f
211.803 275.289 mo
214.959 275.289 li
214.959 276.249 li
211.803 276.249 li
211.803 275.289 li
f
216.051 272.493 mo
217.131 272.493 li
218.475 277.617 li
219.819 272.493 li
221.091 272.493 li
222.435 277.617 li
223.779 272.493 li
224.859 272.493 li
223.143 279.057 li
221.871 279.057 li
220.455 273.681 li
219.039 279.057 li
217.767 279.057 li
216.051 272.493 li
f
229.478 275.757 mo
228.602 275.757 228.002 275.865 227.666 276.057 cv
227.33 276.261 227.162 276.597 227.162 277.077 cv
227.162 277.461 227.282 277.773 227.534 277.989 cv
227.786 278.217 228.134 278.325 228.566 278.325 cv
229.166 278.325 229.646 278.121 230.006 277.689 cv
230.366 277.269 230.546 276.705 230.546 275.997 cv
230.546 275.757 li
229.478 275.757 li
231.626 275.313 mo
231.626 279.057 li
230.546 279.057 li
230.546 278.061 li
230.294 278.469 229.982 278.757 229.622 278.937 cv
229.262 279.117 228.806 279.213 228.278 279.213 cv
227.606 279.213 227.066 279.033 226.67 278.661 cv
226.274 278.289 226.082 277.785 226.082 277.149 cv
226.082 276.417 226.322 275.865 226.826 275.481 cv
227.318 275.109 228.05 274.917 229.034 274.917 cv
230.546 274.917 li
230.546 274.809 li
230.546 274.317 230.378 273.933 230.054 273.657 cv
229.73 273.393 229.274 273.249 228.686 273.249 cv
228.302 273.249 227.942 273.297 227.582 273.393 cv
227.222 273.489 226.886 273.621 226.562 273.789 cv
226.562 272.793 li
226.946 272.649 227.33 272.529 227.702 272.457 cv
228.074 272.385 228.434 272.337 228.794 272.337 cv
229.742 272.337 230.45 272.589 230.918 273.081 cv
231.386 273.573 231.626 274.317 231.626 275.313 cv
f
236.583 279.657 mo
236.271 280.425 235.971 280.941 235.683 281.181 cv
235.395 281.421 235.011 281.541 234.531 281.541 cv
233.667 281.541 li
233.667 280.641 li
234.303 280.641 li
234.591 280.641 234.819 280.569 234.987 280.425 cv
235.155 280.281 235.335 279.957 235.539 279.429 cv
235.731 278.949 li
233.079 272.493 li
234.219 272.493 li
236.271 277.629 li
238.323 272.493 li
239.463 272.493 li
236.583 279.657 li
f
383.67 265.932 mo
383.67 261.932 li
f
383.67 265.932 mo
383.67 261.932 li
@
383.67 29.88 mo
383.67 33.88 li
f
383.67 29.88 mo
383.67 33.88 li
@
370.558 271.341 mo
367.57 276.009 li
370.558 276.009 li
370.558 271.341 li
370.246 270.309 mo
371.734 270.309 li
371.734 276.009 li
372.982 276.009 li
372.982 276.993 li
371.734 276.993 li
371.734 279.057 li
370.558 279.057 li
370.558 276.993 li
366.61 276.993 li
366.61 275.853 li
370.246 270.309 li
f
374.242 275.289 mo
377.398 275.289 li
377.398 276.249 li
374.242 276.249 li
374.242 275.289 li
f
378.49 272.493 mo
379.57 272.493 li
380.914 277.617 li
382.258 272.493 li
383.53 272.493 li
384.874 277.617 li
386.217 272.493 li
387.298 272.493 li
385.582 279.057 li
384.31 279.057 li
382.893 273.681 li
381.478 279.057 li
380.206 279.057 li
378.49 272.493 li
f
391.917 275.757 mo
391.041 275.757 390.441 275.865 390.105 276.057 cv
389.769 276.261 389.601 276.597 389.601 277.077 cv
389.601 277.461 389.721 277.773 389.973 277.989 cv
390.225 278.217 390.573 278.325 391.005 278.325 cv
391.605 278.325 392.085 278.121 392.445 277.689 cv
392.805 277.269 392.985 276.705 392.985 275.997 cv
392.985 275.757 li
391.917 275.757 li
394.065 275.313 mo
394.065 279.057 li
392.985 279.057 li
392.985 278.061 li
392.733 278.469 392.421 278.757 392.061 278.937 cv
391.701 279.117 391.245 279.213 390.717 279.213 cv
390.045 279.213 389.505 279.033 389.109 278.661 cv
388.713 278.289 388.521 277.785 388.521 277.149 cv
388.521 276.417 388.761 275.865 389.265 275.481 cv
389.757 275.109 390.489 274.917 391.473 274.917 cv
392.985 274.917 li
392.985 274.809 li
392.985 274.317 392.817 273.933 392.493 273.657 cv
392.169 273.393 391.713 273.249 391.125 273.249 cv
390.741 273.249 390.381 273.297 390.021 273.393 cv
389.661 273.489 389.325 273.621 389.001 273.789 cv
389.001 272.793 li
389.385 272.649 389.769 272.529 390.141 272.457 cv
390.513 272.385 390.873 272.337 391.233 272.337 cv
392.181 272.337 392.889 272.589 393.357 273.081 cv
393.825 273.573 394.065 274.317 394.065 275.313 cv
f
399.022 279.657 mo
398.71 280.425 398.41 280.941 398.121 281.181 cv
397.833 281.421 397.449 281.541 396.97 281.541 cv
396.105 281.541 li
396.105 280.641 li
396.742 280.641 li
397.03 280.641 397.258 280.569 397.426 280.425 cv
397.594 280.281 397.773 279.957 397.978 279.429 cv
398.169 278.949 li
395.517 272.493 li
396.658 272.493 li
398.71 277.629 li
400.762 272.493 li
401.901 272.493 li
399.022 279.657 li
f
546.273 265.932 mo
546.273 261.932 li
f
546.273 265.932 mo
546.273 261.932 li
@
546.273 29.88 mo
546.273 33.88 li
f
546.273 29.88 mo
546.273 33.88 li
@
530.085 270.309 mo
534.729 270.309 li
534.729 271.305 li
531.165 271.305 li
531.165 273.453 li
531.333 273.393 531.513 273.345 531.681 273.321 cv
531.849 273.297 532.029 273.273 532.197 273.273 cv
533.169 273.273 533.937 273.549 534.513 274.077 cv
535.089 274.617 535.377 275.337 535.377 276.249 cv
535.377 277.197 535.077 277.929 534.489 278.445 cv
533.901 278.961 533.073 279.213 532.017 279.213 cv
531.645 279.213 531.273 279.177 530.889 279.129 cv
530.505 279.069 530.121 278.985 529.713 278.853 cv
529.713 277.665 li
530.061 277.857 530.421 278.001 530.805 278.097 cv
531.177 278.193 531.573 278.229 531.993 278.229 cv
532.665 278.229 533.205 278.061 533.601 277.701 cv
533.985 277.341 534.189 276.861 534.189 276.249 cv
534.189 275.649 533.985 275.169 533.601 274.809 cv
533.205 274.449 532.665 274.269 531.993 274.269 cv
531.681 274.269 531.357 274.305 531.045 274.377 cv
530.733 274.449 530.409 274.557 530.085 274.701 cv
530.085 270.309 li
f
537.009 275.289 mo
540.165 275.289 li
540.165 276.249 li
537.009 276.249 li
537.009 275.289 li
f
541.257 272.493 mo
542.337 272.493 li
543.681 277.617 li
545.025 272.493 li
546.297 272.493 li
547.641 277.617 li
548.985 272.493 li
550.065 272.493 li
548.349 279.057 li
547.077 279.057 li
545.661 273.681 li
544.245 279.057 li
542.973 279.057 li
541.257 272.493 li
f
554.685 275.757 mo
553.808 275.757 553.208 275.865 552.872 276.057 cv
552.536 276.261 552.368 276.597 552.368 277.077 cv
552.368 277.461 552.488 277.773 552.74 277.989 cv
552.992 278.217 553.34 278.325 553.772 278.325 cv
554.372 278.325 554.852 278.121 555.212 277.689 cv
555.573 277.269 555.753 276.705 555.753 275.997 cv
555.753 275.757 li
554.685 275.757 li
556.832 275.313 mo
556.832 279.057 li
555.753 279.057 li
555.753 278.061 li
555.5 278.469 555.188 278.757 554.828 278.937 cv
554.469 279.117 554.012 279.213 553.484 279.213 cv
552.813 279.213 552.272 279.033 551.876 278.661 cv
551.48 278.289 551.288 277.785 551.288 277.149 cv
551.288 276.417 551.529 275.865 552.032 275.481 cv
552.524 275.109 553.256 274.917 554.24 274.917 cv
555.753 274.917 li
555.753 274.809 li
555.753 274.317 555.584 273.933 555.26 273.657 cv
554.936 273.393 554.48 273.249 553.892 273.249 cv
553.508 273.249 553.148 273.297 552.788 273.393 cv
552.428 273.489 552.092 273.621 551.768 273.789 cv
551.768 272.793 li
552.152 272.649 552.536 272.529 552.909 272.457 cv
553.28 272.385 553.641 272.337 554 272.337 cv
554.948 272.337 555.656 272.589 556.125 273.081 cv
556.592 273.573 556.832 274.317 556.832 275.313 cv
f
561.789 279.657 mo
561.477 280.425 561.177 280.941 560.889 281.181 cv
560.601 281.421 560.217 281.541 559.737 281.541 cv
558.873 281.541 li
558.873 280.641 li
559.509 280.641 li
559.797 280.641 560.025 280.569 560.193 280.425 cv
560.361 280.281 560.541 279.957 560.745 279.429 cv
560.937 278.949 li
558.285 272.493 li
559.425 272.493 li
561.477 277.629 li
563.529 272.493 li
564.669 272.493 li
561.789 279.657 li
f
708.876 265.932 mo
708.876 261.932 li
f
708.876 265.932 mo
708.876 261.932 li
@
708.876 29.88 mo
708.876 33.88 li
f
708.876 29.88 mo
708.876 33.88 li
@
695.313 274.209 mo
694.785 274.209 694.365 274.401 694.053 274.761 cv
693.741 275.121 693.585 275.625 693.585 276.249 cv
693.585 276.885 693.741 277.389 694.053 277.749 cv
694.365 278.109 694.785 278.289 695.313 278.289 cv
695.841 278.289 696.261 278.109 696.573 277.749 cv
696.885 277.389 697.041 276.885 697.041 276.249 cv
697.041 275.625 696.885 275.121 696.573 274.761 cv
696.261 274.401 695.841 274.209 695.313 274.209 cv
697.665 270.501 mo
697.665 271.581 li
697.365 271.437 697.065 271.329 696.765 271.257 cv
696.453 271.185 696.153 271.149 695.865 271.149 cv
695.073 271.149 694.473 271.413 694.065 271.941 cv
693.657 272.469 693.417 273.273 693.369 274.329 cv
693.597 273.993 693.885 273.729 694.233 273.549 cv
694.581 273.369 694.965 273.273 695.385 273.273 cv
696.261 273.273 696.957 273.549 697.461 274.077 cv
697.965 274.605 698.229 275.337 698.229 276.249 cv
698.229 277.149 697.953 277.869 697.425 278.409 cv
696.897 278.949 696.189 279.213 695.313 279.213 cv
694.305 279.213 693.525 278.829 692.997 278.061 cv
692.457 277.293 692.193 276.165 692.193 274.689 cv
692.193 273.309 692.517 272.205 693.177 271.389 cv
693.825 270.573 694.713 270.153 695.817 270.153 cv
696.105 270.153 696.405 270.189 696.717 270.237 cv
697.017 270.297 697.329 270.381 697.665 270.501 cv
f
699.573 275.289 mo
702.729 275.289 li
702.729 276.249 li
699.573 276.249 li
699.573 275.289 li
f
703.82 272.493 mo
704.9 272.493 li
706.244 277.617 li
707.588 272.493 li
708.86 272.493 li
710.204 277.617 li
711.548 272.493 li
712.628 272.493 li
710.912 279.057 li
709.64 279.057 li
708.224 273.681 li
706.808 279.057 li
705.536 279.057 li
703.82 272.493 li
f
717.248 275.757 mo
716.372 275.757 715.772 275.865 715.436 276.057 cv
715.1 276.261 714.932 276.597 714.932 277.077 cv
714.932 277.461 715.052 277.773 715.304 277.989 cv
715.556 278.217 715.904 278.325 716.336 278.325 cv
716.936 278.325 717.416 278.121 717.776 277.689 cv
718.136 277.269 718.316 276.705 718.316 275.997 cv
718.316 275.757 li
717.248 275.757 li
719.396 275.313 mo
719.396 279.057 li
718.316 279.057 li
718.316 278.061 li
718.064 278.469 717.752 278.757 717.392 278.937 cv
717.032 279.117 716.576 279.213 716.048 279.213 cv
715.376 279.213 714.836 279.033 714.44 278.661 cv
714.044 278.289 713.852 277.785 713.852 277.149 cv
713.852 276.417 714.092 275.865 714.596 275.481 cv
715.088 275.109 715.82 274.917 716.804 274.917 cv
718.316 274.917 li
718.316 274.809 li
718.316 274.317 718.148 273.933 717.824 273.657 cv
717.5 273.393 717.044 273.249 716.456 273.249 cv
716.072 273.249 715.712 273.297 715.352 273.393 cv
714.992 273.489 714.656 273.621 714.332 273.789 cv
714.332 272.793 li
714.716 272.649 715.1 272.529 715.472 272.457 cv
715.844 272.385 716.204 272.337 716.564 272.337 cv
717.512 272.337 718.22 272.589 718.688 273.081 cv
719.156 273.573 719.396 274.317 719.396 275.313 cv
f
724.352 279.657 mo
724.04 280.425 723.74 280.941 723.452 281.181 cv
723.164 281.421 722.78 281.541 722.3 281.541 cv
721.436 281.541 li
721.436 280.641 li
722.072 280.641 li
722.36 280.641 722.588 280.569 722.756 280.425 cv
722.924 280.281 723.104 279.957 723.308 279.429 cv
723.5 278.949 li
720.848 272.493 li
721.988 272.493 li
724.04 277.629 li
726.092 272.493 li
727.232 272.493 li
724.352 279.657 li
f
58.464 265.932 mo
62.464 265.932 li
f
58.464 265.932 mo
62.464 265.932 li
@
708.876 265.932 mo
704.876 265.932 li
f
708.876 265.932 mo
704.876 265.932 li
@
40.78 261.276 mo
40.168 261.276 39.712 261.576 39.4 262.176 cv
39.088 262.776 38.944 263.676 38.944 264.876 cv
38.944 266.076 39.088 266.976 39.4 267.576 cv
39.712 268.176 40.168 268.476 40.78 268.476 cv
41.392 268.476 41.848 268.176 42.16 267.576 cv
42.46 266.976 42.616 266.076 42.616 264.876 cv
42.616 263.676 42.46 262.776 42.16 262.176 cv
41.848 261.576 41.392 261.276 40.78 261.276 cv
40.78 260.34 mo
41.752 260.34 42.496 260.736 43.024 261.504 cv
43.54 262.284 43.804 263.412 43.804 264.876 cv
43.804 266.352 43.54 267.48 43.024 268.248 cv
42.496 269.016 41.752 269.4 40.78 269.4 cv
39.796 269.4 39.04 269.016 38.524 268.248 cv
38.008 267.48 37.756 266.352 37.756 264.876 cv
37.756 263.412 38.008 262.284 38.524 261.504 cv
39.04 260.736 39.796 260.34 40.78 260.34 cv
f
45.88 267.756 mo
47.116 267.756 li
47.116 269.244 li
45.88 269.244 li
45.88 267.756 li
f
52.2279 261.276 mo
51.6159 261.276 51.1599 261.576 50.8479 262.176 cv
50.5359 262.776 50.3919 263.676 50.3919 264.876 cv
50.3919 266.076 50.5359 266.976 50.8479 267.576 cv
51.1599 268.176 51.6159 268.476 52.2279 268.476 cv
52.8399 268.476 53.2959 268.176 53.6079 267.576 cv
53.9079 266.976 54.0639 266.076 54.0639 264.876 cv
54.0639 263.676 53.9079 262.776 53.6079 262.176 cv
53.2959 261.576 52.8399 261.276 52.2279 261.276 cv
52.2279 260.34 mo
53.1999 260.34 53.9439 260.736 54.4719 261.504 cv
54.9879 262.284 55.2519 263.412 55.2519 264.876 cv
55.2519 266.352 54.9879 267.48 54.4719 268.248 cv
53.9439 269.016 53.1999 269.4 52.2279 269.4 cv
51.2439 269.4 50.4879 269.016 49.9719 268.248 cv
49.4559 267.48 49.2039 266.352 49.2039 264.876 cv
49.2039 263.412 49.4559 262.284 49.9719 261.504 cv
50.4879 260.736 51.2439 260.34 52.2279 260.34 cv
f
58.464 218.722 mo
62.464 218.722 li
f
58.464 218.722 mo
62.464 218.722 li
@
708.876 218.722 mo
704.876 218.722 li
f
708.876 218.722 mo
704.876 218.722 li
@
41.1862 214.066 mo
40.5742 214.066 40.1183 214.366 39.8063 214.966 cv
39.4943 215.566 39.3503 216.466 39.3503 217.666 cv
39.3503 218.866 39.4943 219.766 39.8063 220.366 cv
40.1183 220.966 40.5742 221.266 41.1862 221.266 cv
41.7983 221.266 42.2542 220.966 42.5662 220.366 cv
42.8662 219.766 43.0223 218.866 43.0223 217.666 cv
43.0223 216.466 42.8662 215.566 42.5662 214.966 cv
42.2542 214.366 41.7983 214.066 41.1862 214.066 cv
41.1862 213.13 mo
42.1582 213.13 42.9023 213.526 43.4303 214.294 cv
43.9463 215.074 44.2103 216.202 44.2103 217.666 cv
44.2103 219.142 43.9463 220.27 43.4303 221.038 cv
42.9023 221.806 42.1582 222.19 41.1862 222.19 cv
40.2023 222.19 39.4463 221.806 38.9303 221.038 cv
38.4142 220.27 38.1623 219.142 38.1623 217.666 cv
38.1623 216.202 38.4142 215.074 38.9303 214.294 cv
39.4463 213.526 40.2023 213.13 41.1862 213.13 cv
f
46.2863 220.546 mo
47.5223 220.546 li
47.5223 222.034 li
46.2863 222.034 li
46.2863 220.546 li
f
51.1222 221.038 mo
55.2502 221.038 li
55.2502 222.034 li
49.6942 222.034 li
49.6942 221.038 li
50.1382 220.582 50.7502 219.958 51.5302 219.166 cv
52.2982 218.386 52.7902 217.882 52.9942 217.654 cv
53.3782 217.234 53.6422 216.874 53.7862 216.574 cv
53.9302 216.286 54.0142 215.986 54.0142 215.698 cv
54.0142 215.242 53.8462 214.858 53.5222 214.57 cv
53.1982 214.282 52.7782 214.126 52.2502 214.126 cv
51.8782 214.126 51.4822 214.198 51.0742 214.318 cv
50.6662 214.45 50.2222 214.642 49.7542 214.906 cv
49.7542 213.706 li
50.2342 213.514 50.6782 213.37 51.0862 213.274 cv
51.4942 213.178 51.8782 213.13 52.2262 213.13 cv
53.1262 213.13 53.8462 213.358 54.3862 213.814 cv
54.9262 214.27 55.2022 214.87 55.2022 215.626 cv
55.2022 215.986 55.1302 216.334 54.9982 216.646 cv
54.8662 216.97 54.6262 217.354 54.2662 217.786 cv
54.1702 217.906 53.8582 218.23 53.3302 218.77 cv
52.8022 219.31 52.0702 220.066 51.1222 221.038 cv
f
58.464 171.511 mo
62.464 171.511 li
f
58.464 171.511 mo
62.464 171.511 li
@
708.876 171.511 mo
704.876 171.511 li
f
708.876 171.511 mo
704.876 171.511 li
@
40.655 166.856 mo
40.043 166.856 39.587 167.156 39.275 167.756 cv
38.963 168.356 38.819 169.256 38.819 170.456 cv
38.819 171.656 38.963 172.556 39.275 173.156 cv
39.587 173.756 40.043 174.056 40.655 174.056 cv
41.267 174.056 41.723 173.756 42.035 173.156 cv
42.335 172.556 42.491 171.656 42.491 170.456 cv
42.491 169.256 42.335 168.356 42.035 167.756 cv
41.723 167.156 41.267 166.856 40.655 166.856 cv
40.655 165.92 mo
41.627 165.92 42.371 166.316 42.899 167.084 cv
43.415 167.864 43.679 168.992 43.679 170.456 cv
43.679 171.932 43.415 173.06 42.899 173.828 cv
42.371 174.596 41.627 174.98 40.655 174.98 cv
39.671 174.98 38.915 174.596 38.399 173.828 cv
37.883 173.06 37.631 171.932 37.631 170.456 cv
37.631 168.992 37.883 167.864 38.399 167.084 cv
38.915 166.316 39.671 165.92 40.655 165.92 cv
f
45.755 173.336 mo
46.991 173.336 li
46.991 174.824 li
45.755 174.824 li
45.755 173.336 li
f
52.8229 167.108 mo
49.8349 171.776 li
52.8229 171.776 li
52.8229 167.108 li
52.5109 166.076 mo
53.9989 166.076 li
53.9989 171.776 li
55.2469 171.776 li
55.2469 172.76 li
53.9989 172.76 li
53.9989 174.824 li
52.8229 174.824 li
52.8229 172.76 li
48.8749 172.76 li
48.8749 171.62 li
52.5109 166.076 li
f
58.464 124.301 mo
62.464 124.301 li
f
58.464 124.301 mo
62.464 124.301 li
@
708.876 124.301 mo
704.876 124.301 li
f
708.876 124.301 mo
704.876 124.301 li
@
40.7487 119.645 mo
40.1367 119.645 39.6808 119.945 39.3688 120.545 cv
39.0568 121.145 38.9128 122.045 38.9128 123.245 cv
38.9128 124.445 39.0568 125.345 39.3688 125.945 cv
39.6808 126.545 40.1367 126.845 40.7487 126.845 cv
41.3608 126.845 41.8167 126.545 42.1287 125.945 cv
42.4287 125.345 42.5848 124.445 42.5848 123.245 cv
42.5848 122.045 42.4287 121.145 42.1287 120.545 cv
41.8167 119.945 41.3608 119.645 40.7487 119.645 cv
40.7487 118.709 mo
41.7207 118.709 42.4648 119.105 42.9928 119.873 cv
43.5088 120.653 43.7728 121.781 43.7728 123.245 cv
43.7728 124.721 43.5088 125.849 42.9928 126.617 cv
42.4648 127.385 41.7207 127.769 40.7487 127.769 cv
39.7648 127.769 39.0088 127.385 38.4928 126.617 cv
37.9767 125.849 37.7248 124.721 37.7248 123.245 cv
37.7248 121.781 37.9767 120.653 38.4928 119.873 cv
39.0088 119.105 39.7648 118.709 40.7487 118.709 cv
f
45.8488 126.125 mo
47.0848 126.125 li
47.0848 127.613 li
45.8488 127.613 li
45.8488 126.125 li
f
52.3407 122.765 mo
51.8127 122.765 51.3927 122.957 51.0807 123.317 cv
50.7687 123.677 50.6127 124.181 50.6127 124.805 cv
50.6127 125.441 50.7687 125.945 51.0807 126.305 cv
51.3927 126.665 51.8127 126.845 52.3407 126.845 cv
52.8687 126.845 53.2887 126.665 53.6007 126.305 cv
53.9127 125.945 54.0687 125.441 54.0687 124.805 cv
54.0687 124.181 53.9127 123.677 53.6007 123.317 cv
53.2887 122.957 52.8687 122.765 52.3407 122.765 cv
54.6927 119.057 mo
54.6927 120.137 li
54.3927 119.993 54.0927 119.885 53.7927 119.813 cv
53.4807 119.741 53.1807 119.705 52.8927 119.705 cv
52.1007 119.705 51.5007 119.969 51.0927 120.497 cv
50.6847 121.025 50.4447 121.829 50.3967 122.885 cv
50.6247 122.549 50.9127 122.285 51.2607 122.105 cv
51.6087 121.925 51.9927 121.829 52.4127 121.829 cv
53.2887 121.829 53.9847 122.105 54.4887 122.633 cv
54.9927 123.161 55.2567 123.893 55.2567 124.805 cv
55.2567 125.705 54.9807 126.425 54.4527 126.965 cv
53.9247 127.505 53.2167 127.769 52.3407 127.769 cv
51.3327 127.769 50.5527 127.385 50.0247 126.617 cv
49.4847 125.849 49.2207 124.721 49.2207 123.245 cv
49.2207 121.865 49.5447 120.761 50.2047 119.945 cv
50.8527 119.129 51.7407 118.709 52.8447 118.709 cv
53.1327 118.709 53.4327 118.745 53.7447 118.793 cv
54.0447 118.853 54.3567 118.937 54.6927 119.057 cv
f
58.464 77.0904 mo
62.464 77.0904 li
f
58.464 77.0904 mo
62.464 77.0904 li
@
708.876 77.0904 mo
704.876 77.0904 li
f
708.876 77.0904 mo
704.876 77.0904 li
@
40.8112 72.4349 mo
40.1992 72.4349 39.7433 72.7349 39.4313 73.3349 cv
39.1193 73.9349 38.9753 74.8349 38.9753 76.0349 cv
38.9753 77.2349 39.1193 78.1349 39.4313 78.7349 cv
39.7433 79.3349 40.1992 79.6349 40.8112 79.6349 cv
41.4233 79.6349 41.8792 79.3349 42.1912 78.7349 cv
42.4912 78.1349 42.6473 77.2349 42.6473 76.0349 cv
42.6473 74.8349 42.4912 73.9349 42.1912 73.3349 cv
41.8792 72.7349 41.4233 72.4349 40.8112 72.4349 cv
40.8112 71.4989 mo
41.7832 71.4989 42.5273 71.8949 43.0553 72.6629 cv
43.5713 73.4429 43.8353 74.5709 43.8353 76.0349 cv
43.8353 77.5109 43.5713 78.6389 43.0553 79.4069 cv
42.5273 80.1749 41.7832 80.5589 40.8112 80.5589 cv
39.8273 80.5589 39.0713 80.1749 38.5553 79.4069 cv
38.0392 78.6389 37.7873 77.5109 37.7873 76.0349 cv
37.7873 74.5709 38.0392 73.4429 38.5553 72.6629 cv
39.0713 71.8949 39.8273 71.4989 40.8112 71.4989 cv
f
45.9113 78.9149 mo
47.1473 78.9149 li
47.1473 80.4029 li
45.9113 80.4029 li
45.9113 78.9149 li
f
52.2592 76.2509 mo
51.6952 76.2509 51.2512 76.4069 50.9272 76.7069 cv
50.6032 77.0069 50.4472 77.4149 50.4472 77.9429 cv
50.4472 78.4709 50.6032 78.8909 50.9272 79.1909 cv
51.2512 79.4909 51.6952 79.6349 52.2592 79.6349 cv
52.8112 79.6349 53.2552 79.4909 53.5792 79.1789 cv
53.9032 78.8789 54.0712 78.4709 54.0712 77.9429 cv
54.0712 77.4149 53.9032 77.0069 53.5912 76.7069 cv
53.2672 76.4069 52.8232 76.2509 52.2592 76.2509 cv
51.0712 75.7469 mo
50.5672 75.6269 50.1712 75.3869 49.8832 75.0389 cv
49.5952 74.6909 49.4632 74.2709 49.4632 73.7669 cv
49.4632 73.0709 49.7032 72.5189 50.2072 72.1109 cv
50.6992 71.7029 51.3832 71.4989 52.2592 71.4989 cv
53.1232 71.4989 53.8072 71.7029 54.3112 72.1109 cv
54.8032 72.5189 55.0552 73.0709 55.0552 73.7669 cv
55.0552 74.2709 54.9112 74.6909 54.6232 75.0389 cv
54.3352 75.3869 53.9512 75.6269 53.4472 75.7469 cv
54.0112 75.8789 54.4552 76.1429 54.7792 76.5269 cv
55.0912 76.9109 55.2592 77.3909 55.2592 77.9429 cv
55.2592 78.7949 54.9952 79.4429 54.4792 79.8869 cv
53.9512 80.3429 53.2192 80.5589 52.2592 80.5589 cv
51.2872 80.5589 50.5432 80.3429 50.0272 79.8869 cv
49.5112 79.4429 49.2592 78.7949 49.2592 77.9429 cv
49.2592 77.3909 49.4152 76.9109 49.7392 76.5269 cv
50.0512 76.1429 50.4952 75.8789 51.0712 75.7469 cv
50.6392 73.8749 mo
50.6392 74.3309 50.7712 74.6909 51.0592 74.9429 cv
51.3472 75.1949 51.7432 75.3149 52.2592 75.3149 cv
52.7632 75.3149 53.1592 75.1949 53.4472 74.9429 cv
53.7352 74.6909 53.8792 74.3309 53.8792 73.8749 cv
53.8792 73.4189 53.7352 73.0709 53.4472 72.8189 cv
53.1592 72.5669 52.7632 72.4349 52.2592 72.4349 cv
51.7432 72.4349 51.3472 72.5669 51.0592 72.8189 cv
50.7712 73.0709 50.6392 73.4189 50.6392 73.8749 cv
f
58.464 29.88 mo
62.464 29.88 li
f
58.464 29.88 mo
62.464 29.88 li
@
708.876 29.88 mo
704.876 29.88 li
f
708.876 29.88 mo
704.876 29.88 li
@
38.9676 32.1965 mo
40.8996 32.1965 li
40.8996 25.5245 li
38.7996 25.9445 li
38.7996 24.8645 li
40.8876 24.4445 li
42.0756 24.4445 li
42.0756 32.1965 li
44.0076 32.1965 li
44.0076 33.1925 li
38.9676 33.1925 li
38.9676 32.1965 li
f
46.3956 31.7045 mo
47.6316 31.7045 li
47.6316 33.1925 li
46.3956 33.1925 li
46.3956 31.7045 li
f
52.7436 25.2245 mo
52.1316 25.2245 51.6756 25.5245 51.3636 26.1245 cv
51.0516 26.7245 50.9076 27.6245 50.9076 28.8245 cv
50.9076 30.0245 51.0516 30.9245 51.3636 31.5245 cv
51.6756 32.1245 52.1316 32.4245 52.7436 32.4245 cv
53.3556 32.4245 53.8116 32.1245 54.1236 31.5245 cv
54.4236 30.9245 54.5796 30.0245 54.5796 28.8245 cv
54.5796 27.6245 54.4236 26.7245 54.1236 26.1245 cv
53.8116 25.5245 53.3556 25.2245 52.7436 25.2245 cv
52.7436 24.2885 mo
53.7156 24.2885 54.4596 24.6845 54.9876 25.4525 cv
55.5036 26.2325 55.7676 27.3605 55.7676 28.8245 cv
55.7676 30.3005 55.5036 31.4285 54.9876 32.1965 cv
54.4596 32.9645 53.7156 33.3485 52.7436 33.3485 cv
51.7596 33.3485 51.0036 32.9645 50.4876 32.1965 cv
49.9716 31.4285 49.7196 30.3005 49.7196 28.8245 cv
49.7196 27.3605 49.9716 26.2325 50.4876 25.4525 cv
51.0036 24.6845 51.7596 24.2885 52.7436 24.2885 cv
f
gsave
58.464 265.932 mo
708.876 265.932 li
708.876 29.88 li
58.464 29.88 li
cp
clp
1 lw
[6 6 ] 0 dsh
58.464 39.7581 mo
221.067 51.3393 li
383.67 123.304 li
546.273 148.665 li
708.876 265.932 li
@
gsave
55.214 43.0081 mo
61.714 43.0081 li
61.714 36.5081 li
55.214 36.5081 li
cp
clp
.5 lw
0 lj
[] 0 dsh
55.464 42.7581 mo
61.464 42.7581 li
61.464 36.7581 li
55.464 36.7581 li
cp
@
grestore
gsave
217.817 54.5893 mo
224.317 54.5893 li
224.317 48.0893 li
217.817 48.0893 li
cp
clp
.5 lw
0 lj
[] 0 dsh
218.067 54.3393 mo
224.067 54.3393 li
224.067 48.3393 li
218.067 48.3393 li
cp
@
grestore
gsave
380.42 126.554 mo
386.92 126.554 li
386.92 120.054 li
380.42 120.054 li
cp
clp
.5 lw
0 lj
[] 0 dsh
380.67 126.304 mo
386.67 126.304 li
386.67 120.304 li
380.67 120.304 li
cp
@
grestore
gsave
543.023 151.915 mo
549.523 151.915 li
549.523 145.415 li
543.023 145.415 li
cp
clp
.5 lw
0 lj
[] 0 dsh
543.273 151.665 mo
549.273 151.665 li
549.273 145.665 li
543.273 145.665 li
cp
@
grestore
gsave
705.626 269.182 mo
712.126 269.182 li
712.126 262.682 li
705.626 262.682 li
cp
clp
.5 lw
0 lj
[] 0 dsh
705.876 268.932 mo
711.876 268.932 li
711.876 262.932 li
705.876 262.932 li
cp
@
grestore
grestore
gsave
58.464 265.932 mo
708.876 265.932 li
708.876 29.88 li
58.464 29.88 li
cp
clp
1 lw
[1 3 ] 0 dsh
58.464 221.396 mo
221.067 195.794 li
383.67 183.559 li
546.273 206.484 li
708.876 50.3463 li
@
gsave
55.214 224.646 mo
61.714 224.646 li
61.714 218.146 li
55.214 218.146 li
cp
clp
.5 lw
[] 0 dsh
55.464 224.396 mo
61.464 218.396 li
55.464 218.396 mo
61.464 224.396 li
@
grestore
gsave
217.817 199.044 mo
224.317 199.044 li
224.317 192.544 li
217.817 192.544 li
cp
clp
.5 lw
[] 0 dsh
218.067 198.794 mo
224.067 192.794 li
218.067 192.794 mo
224.067 198.794 li
@
grestore
gsave
380.42 186.809 mo
386.92 186.809 li
386.92 180.309 li
380.42 180.309 li
cp
clp
.5 lw
[] 0 dsh
380.67 186.559 mo
386.67 180.559 li
380.67 180.559 mo
386.67 186.559 li
@
grestore
gsave
543.023 209.734 mo
549.523 209.734 li
549.523 203.234 li
543.023 203.234 li
cp
clp
.5 lw
[] 0 dsh
543.273 209.484 mo
549.273 203.484 li
543.273 203.484 mo
549.273 209.484 li
@
grestore
gsave
705.626 53.5963 mo
712.126 53.5963 li
712.126 47.0963 li
705.626 47.0963 li
cp
clp
.5 lw
[] 0 dsh
705.876 53.3463 mo
711.876 47.3463 li
705.876 47.3463 mo
711.876 53.3463 li
@
grestore
grestore
gsave
58.464 265.932 mo
708.876 265.932 li
708.876 29.88 li
58.464 29.88 li
cp
clp
1 lw
[3 5 1 5 ] 0 dsh
58.464 223.948 mo
221.067 224.589 li
383.67 227.096 li
546.273 233.932 li
708.876 265.932 li
@
gsave
55.214 227.198 mo
61.714 227.198 li
61.714 220.698 li
55.214 220.698 li
cp
clp
.5 lw
0 lj
[] 0 dsh
58.464 220.948 mo
55.464 226.948 li
61.464 226.948 li
cp
@
grestore
gsave
217.817 227.839 mo
224.317 227.839 li
224.317 221.339 li
217.817 221.339 li
cp
clp
.5 lw
0 lj
[] 0 dsh
221.067 221.589 mo
218.067 227.589 li
224.067 227.589 li
cp
@
grestore
gsave
380.42 230.346 mo
386.92 230.346 li
386.92 223.846 li
380.42 223.846 li
cp
clp
.5 lw
0 lj
[] 0 dsh
383.67 224.096 mo
380.67 230.096 li
386.67 230.096 li
cp
@
grestore
gsave
543.023 237.182 mo
549.523 237.182 li
549.523 230.682 li
543.023 230.682 li
cp
clp
.5 lw
0 lj
[] 0 dsh
546.273 230.932 mo
543.273 236.932 li
549.273 236.932 li
cp
@
grestore
gsave
705.626 269.182 mo
712.126 269.182 li
712.126 262.682 li
705.626 262.682 li
cp
clp
.5 lw
0 lj
[] 0 dsh
708.876 262.932 mo
705.876 268.932 li
711.876 268.932 li
cp
@
grestore
grestore
58.464 265.932 mo
58.464 261.932 li
f
58.464 265.932 mo
58.464 261.932 li
@
58.464 29.88 mo
58.464 33.88 li
f
58.464 29.88 mo
58.464 33.88 li
@
43.2602 278.061 mo
47.3882 278.061 li
47.3882 279.057 li
41.8322 279.057 li
41.8322 278.061 li
42.2762 277.605 42.8882 276.981 43.6682 276.189 cv
44.4362 275.409 44.9282 274.905 45.1322 274.677 cv
45.5162 274.257 45.7802 273.897 45.9242 273.597 cv
46.0682 273.309 46.1522 273.009 46.1522 272.721 cv
46.1522 272.265 45.9842 271.881 45.6602 271.593 cv
45.3362 271.305 44.9162 271.149 44.3882 271.149 cv
44.0162 271.149 43.6202 271.221 43.2122 271.341 cv
42.8042 271.473 42.3602 271.665 41.8922 271.929 cv
41.8922 270.729 li
42.3722 270.537 42.8162 270.393 43.2242 270.297 cv
43.6322 270.201 44.0162 270.153 44.3642 270.153 cv
45.2642 270.153 45.9842 270.381 46.5242 270.837 cv
47.0642 271.293 47.3402 271.893 47.3402 272.649 cv
47.3402 273.009 47.2682 273.357 47.1362 273.669 cv
47.0042 273.993 46.7642 274.377 46.4042 274.809 cv
46.3082 274.929 45.9962 275.253 45.4682 275.793 cv
44.9402 276.333 44.2082 277.089 43.2602 278.061 cv
f
49.1762 275.289 mo
52.3322 275.289 li
52.3322 276.249 li
49.1762 276.249 li
49.1762 275.289 li
f
53.4241 272.493 mo
54.5041 272.493 li
55.8481 277.617 li
57.1921 272.493 li
58.4641 272.493 li
59.8081 277.617 li
61.1521 272.493 li
62.2321 272.493 li
60.5161 279.057 li
59.2441 279.057 li
57.8281 273.681 li
56.4121 279.057 li
55.1401 279.057 li
53.4241 272.493 li
f
66.852 275.757 mo
65.976 275.757 65.376 275.865 65.04 276.057 cv
64.704 276.261 64.536 276.597 64.536 277.077 cv
64.536 277.461 64.656 277.773 64.908 277.989 cv
65.16 278.217 65.508 278.325 65.94 278.325 cv
66.54 278.325 67.02 278.121 67.38 277.689 cv
67.74 277.269 67.92 276.705 67.92 275.997 cv
67.92 275.757 li
66.852 275.757 li
69 275.313 mo
69 279.057 li
67.92 279.057 li
67.92 278.061 li
67.668 278.469 67.356 278.757 66.996 278.937 cv
66.636 279.117 66.18 279.213 65.652 279.213 cv
64.98 279.213 64.44 279.033 64.044 278.661 cv
63.648 278.289 63.456 277.785 63.456 277.149 cv
63.456 276.417 63.696 275.865 64.2 275.481 cv
64.692 275.109 65.424 274.917 66.408 274.917 cv
67.92 274.917 li
67.92 274.809 li
67.92 274.317 67.752 273.933 67.428 273.657 cv
67.104 273.393 66.648 273.249 66.06 273.249 cv
65.676 273.249 65.316 273.297 64.956 273.393 cv
64.596 273.489 64.26 273.621 63.936 273.789 cv
63.936 272.793 li
64.32 272.649 64.704 272.529 65.076 272.457 cv
65.448 272.385 65.808 272.337 66.168 272.337 cv
67.116 272.337 67.824 272.589 68.292 273.081 cv
68.76 273.573 69 274.317 69 275.313 cv
f
73.9561 279.657 mo
73.6441 280.425 73.3441 280.941 73.0561 281.181 cv
72.7681 281.421 72.3841 281.541 71.9041 281.541 cv
71.0401 281.541 li
71.0401 280.641 li
71.6761 280.641 li
71.9641 280.641 72.1921 280.569 72.3601 280.425 cv
72.5281 280.281 72.7081 279.957 72.9121 279.429 cv
73.1041 278.949 li
70.4521 272.493 li
71.5921 272.493 li
73.6441 277.629 li
75.6961 272.493 li
76.8361 272.493 li
73.9561 279.657 li
f
221.067 265.932 mo
221.067 261.932 li
f
221.067 265.932 mo
221.067 261.932 li
@
221.067 29.88 mo
221.067 33.88 li
f
221.067 29.88 mo
221.067 33.88 li
@
208.455 274.341 mo
209.019 274.461 209.463 274.713 209.775 275.097 cv
210.087 275.481 210.255 275.961 210.255 276.513 cv
210.255 277.377 209.955 278.049 209.367 278.517 cv
208.767 278.985 207.927 279.213 206.835 279.213 cv
206.463 279.213 206.079 279.177 205.695 279.105 cv
205.311 279.045 204.903 278.937 204.495 278.793 cv
204.495 277.653 li
204.819 277.845 205.179 277.989 205.575 278.085 cv
205.959 278.181 206.367 278.229 206.799 278.229 cv
207.543 278.229 208.107 278.085 208.491 277.797 cv
208.875 277.509 209.079 277.077 209.079 276.513 cv
209.079 276.009 208.899 275.601 208.539 275.313 cv
208.179 275.025 207.675 274.869 207.027 274.869 cv
206.007 274.869 li
206.007 273.897 li
207.075 273.897 li
207.651 273.897 208.095 273.789 208.407 273.549 cv
208.719 273.321 208.875 272.985 208.875 272.541 cv
208.875 272.097 208.707 271.749 208.395 271.509 cv
208.071 271.269 207.615 271.149 207.027 271.149 cv
206.703 271.149 206.355 271.185 205.983 271.257 cv
205.611 271.329 205.203 271.437 204.759 271.581 cv
204.759 270.525 li
205.203 270.405 205.623 270.309 206.019 270.249 cv
206.403 270.189 206.775 270.153 207.135 270.153 cv
208.023 270.153 208.731 270.357 209.259 270.765 cv
209.787 271.173 210.051 271.725 210.051 272.421 cv
210.051 272.901 209.907 273.309 209.631 273.645 cv
209.355 273.981 208.959 274.221 208.455 274.341 cv
f
211.803 275.289 mo
214.959 275.289 li
214.959 276.249 li
211.803 276.249 li
211.803 275.289 li
f
216.051 272.493 mo
217.131 272.493 li
218.475 277.617 li
219.819 272.493 li
221.091 272.493 li
222.435 277.617 li
223.779 272.493 li
224.859 272.493 li
223.143 279.057 li
221.871 279.057 li
220.455 273.681 li
219.039 279.057 li
217.767 279.057 li
216.051 272.493 li
f
229.478 275.757 mo
228.602 275.757 228.002 275.865 227.666 276.057 cv
227.33 276.261 227.162 276.597 227.162 277.077 cv
227.162 277.461 227.282 277.773 227.534 277.989 cv
227.786 278.217 228.134 278.325 228.566 278.325 cv
229.166 278.325 229.646 278.121 230.006 277.689 cv
230.366 277.269 230.546 276.705 230.546 275.997 cv
230.546 275.757 li
229.478 275.757 li
231.626 275.313 mo
231.626 279.057 li
230.546 279.057 li
230.546 278.061 li
230.294 278.469 229.982 278.757 229.622 278.937 cv
229.262 279.117 228.806 279.213 228.278 279.213 cv
227.606 279.213 227.066 279.033 226.67 278.661 cv
226.274 278.289 226.082 277.785 226.082 277.149 cv
226.082 276.417 226.322 275.865 226.826 275.481 cv
227.318 275.109 228.05 274.917 229.034 274.917 cv
230.546 274.917 li
230.546 274.809 li
230.546 274.317 230.378 273.933 230.054 273.657 cv
229.73 273.393 229.274 273.249 228.686 273.249 cv
228.302 273.249 227.942 273.297 227.582 273.393 cv
227.222 273.489 226.886 273.621 226.562 273.789 cv
226.562 272.793 li
226.946 272.649 227.33 272.529 227.702 272.457 cv
228.074 272.385 228.434 272.337 228.794 272.337 cv
229.742 272.337 230.45 272.589 230.918 273.081 cv
231.386 273.573 231.626 274.317 231.626 275.313 cv
f
236.583 279.657 mo
236.271 280.425 235.971 280.941 235.683 281.181 cv
235.395 281.421 235.011 281.541 234.531 281.541 cv
233.667 281.541 li
233.667 280.641 li
234.303 280.641 li
234.591 280.641 234.819 280.569 234.987 280.425 cv
235.155 280.281 235.335 279.957 235.539 279.429 cv
235.731 278.949 li
233.079 272.493 li
234.219 272.493 li
236.271 277.629 li
238.323 272.493 li
239.463 272.493 li
236.583 279.657 li
f
383.67 265.932 mo
383.67 261.932 li
f
383.67 265.932 mo
383.67 261.932 li
@
383.67 29.88 mo
383.67 33.88 li
f
383.67 29.88 mo
383.67 33.88 li
@
370.558 271.341 mo
367.57 276.009 li
370.558 276.009 li
370.558 271.341 li
370.246 270.309 mo
371.734 270.309 li
371.734 276.009 li
372.982 276.009 li
372.982 276.993 li
371.734 276.993 li
371.734 279.057 li
370.558 279.057 li
370.558 276.993 li
366.61 276.993 li
366.61 275.853 li
370.246 270.309 li
f
374.242 275.289 mo
377.398 275.289 li
377.398 276.249 li
374.242 276.249 li
374.242 275.289 li
f
378.49 272.493 mo
379.57 272.493 li
380.914 277.617 li
382.258 272.493 li
383.53 272.493 li
384.874 277.617 li
386.217 272.493 li
387.298 272.493 li
385.582 279.057 li
384.31 279.057 li
382.893 273.681 li
381.478 279.057 li
380.206 279.057 li
378.49 272.493 li
f
391.917 275.757 mo
391.041 275.757 390.441 275.865 390.105 276.057 cv
389.769 276.261 389.601 276.597 389.601 277.077 cv
389.601 277.461 389.721 277.773 389.973 277.989 cv
390.225 278.217 390.573 278.325 391.005 278.325 cv
391.605 278.325 392.085 278.121 392.445 277.689 cv
392.805 277.269 392.985 276.705 392.985 275.997 cv
392.985 275.757 li
391.917 275.757 li
394.065 275.313 mo
394.065 279.057 li
392.985 279.057 li
392.985 278.061 li
392.733 278.469 392.421 278.757 392.061 278.937 cv
391.701 279.117 391.245 279.213 390.717 279.213 cv
390.045 279.213 389.505 279.033 389.109 278.661 cv
388.713 278.289 388.521 277.785 388.521 277.149 cv
388.521 276.417 388.761 275.865 389.265 275.481 cv
389.757 275.109 390.489 274.917 391.473 274.917 cv
392.985 274.917 li
392.985 274.809 li
392.985 274.317 392.817 273.933 392.493 273.657 cv
392.169 273.393 391.713 273.249 391.125 273.249 cv
390.741 273.249 390.381 273.297 390.021 273.393 cv
389.661 273.489 389.325 273.621 389.001 273.789 cv
389.001 272.793 li
389.385 272.649 389.769 272.529 390.141 272.457 cv
390.513 272.385 390.873 272.337 391.233 272.337 cv
392.181 272.337 392.889 272.589 393.357 273.081 cv
393.825 273.573 394.065 274.317 394.065 275.313 cv
f
399.022 279.657 mo
398.71 280.425 398.41 280.941 398.121 281.181 cv
397.833 281.421 397.449 281.541 396.97 281.541 cv
396.105 281.541 li
396.105 280.641 li
396.742 280.641 li
397.03 280.641 397.258 280.569 397.426 280.425 cv
397.594 280.281 397.773 279.957 397.978 279.429 cv
398.169 278.949 li
395.517 272.493 li
396.658 272.493 li
398.71 277.629 li
400.762 272.493 li
401.901 272.493 li
399.022 279.657 li
f
546.273 265.932 mo
546.273 261.932 li
f
546.273 265.932 mo
546.273 261.932 li
@
546.273 29.88 mo
546.273 33.88 li
f
546.273 29.88 mo
546.273 33.88 li
@
530.085 270.309 mo
534.729 270.309 li
534.729 271.305 li
531.165 271.305 li
531.165 273.453 li
531.333 273.393 531.513 273.345 531.681 273.321 cv
531.849 273.297 532.029 273.273 532.197 273.273 cv
533.169 273.273 533.937 273.549 534.513 274.077 cv
535.089 274.617 535.377 275.337 535.377 276.249 cv
535.377 277.197 535.077 277.929 534.489 278.445 cv
533.901 278.961 533.073 279.213 532.017 279.213 cv
531.645 279.213 531.273 279.177 530.889 279.129 cv
530.505 279.069 530.121 278.985 529.713 278.853 cv
529.713 277.665 li
530.061 277.857 530.421 278.001 530.805 278.097 cv
531.177 278.193 531.573 278.229 531.993 278.229 cv
532.665 278.229 533.205 278.061 533.601 277.701 cv
533.985 277.341 534.189 276.861 534.189 276.249 cv
534.189 275.649 533.985 275.169 533.601 274.809 cv
533.205 274.449 532.665 274.269 531.993 274.269 cv
531.681 274.269 531.357 274.305 531.045 274.377 cv
530.733 274.449 530.409 274.557 530.085 274.701 cv
530.085 270.309 li
f
537.009 275.289 mo
540.165 275.289 li
540.165 276.249 li
537.009 276.249 li
537.009 275.289 li
f
541.257 272.493 mo
542.337 272.493 li
543.681 277.617 li
545.025 272.493 li
546.297 272.493 li
547.641 277.617 li
548.985 272.493 li
550.065 272.493 li
548.349 279.057 li
547.077 279.057 li
545.661 273.681 li
544.245 279.057 li
542.973 279.057 li
541.257 272.493 li
f
554.685 275.757 mo
553.808 275.757 553.208 275.865 552.872 276.057 cv
552.536 276.261 552.368 276.597 552.368 277.077 cv
552.368 277.461 552.488 277.773 552.74 277.989 cv
552.992 278.217 553.34 278.325 553.772 278.325 cv
554.372 278.325 554.852 278.121 555.212 277.689 cv
555.573 277.269 555.753 276.705 555.753 275.997 cv
555.753 275.757 li
554.685 275.757 li
556.832 275.313 mo
556.832 279.057 li
555.753 279.057 li
555.753 278.061 li
555.5 278.469 555.188 278.757 554.828 278.937 cv
554.469 279.117 554.012 279.213 553.484 279.213 cv
552.813 279.213 552.272 279.033 551.876 278.661 cv
551.48 278.289 551.288 277.785 551.288 277.149 cv
551.288 276.417 551.529 275.865 552.032 275.481 cv
552.524 275.109 553.256 274.917 554.24 274.917 cv
555.753 274.917 li
555.753 274.809 li
555.753 274.317 555.584 273.933 555.26 273.657 cv
554.936 273.393 554.48 273.249 553.892 273.249 cv
553.508 273.249 553.148 273.297 552.788 273.393 cv
552.428 273.489 552.092 273.621 551.768 273.789 cv
551.768 272.793 li
552.152 272.649 552.536 272.529 552.909 272.457 cv
553.28 272.385 553.641 272.337 554 272.337 cv
554.948 272.337 555.656 272.589 556.125 273.081 cv
556.592 273.573 556.832 274.317 556.832 275.313 cv
f
561.789 279.657 mo
561.477 280.425 561.177 280.941 560.889 281.181 cv
560.601 281.421 560.217 281.541 559.737 281.541 cv
558.873 281.541 li
558.873 280.641 li
559.509 280.641 li
559.797 280.641 560.025 280.569 560.193 280.425 cv
560.361 280.281 560.541 279.957 560.745 279.429 cv
560.937 278.949 li
558.285 272.493 li
559.425 272.493 li
561.477 277.629 li
563.529 272.493 li
564.669 272.493 li
561.789 279.657 li
f
708.876 265.932 mo
708.876 261.932 li
f
708.876 265.932 mo
708.876 261.932 li
@
708.876 29.88 mo
708.876 33.88 li
f
708.876 29.88 mo
708.876 33.88 li
@
695.313 274.209 mo
694.785 274.209 694.365 274.401 694.053 274.761 cv
693.741 275.121 693.585 275.625 693.585 276.249 cv
693.585 276.885 693.741 277.389 694.053 277.749 cv
694.365 278.109 694.785 278.289 695.313 278.289 cv
695.841 278.289 696.261 278.109 696.573 277.749 cv
696.885 277.389 697.041 276.885 697.041 276.249 cv
697.041 275.625 696.885 275.121 696.573 274.761 cv
696.261 274.401 695.841 274.209 695.313 274.209 cv
697.665 270.501 mo
697.665 271.581 li
697.365 271.437 697.065 271.329 696.765 271.257 cv
696.453 271.185 696.153 271.149 695.865 271.149 cv
695.073 271.149 694.473 271.413 694.065 271.941 cv
693.657 272.469 693.417 273.273 693.369 274.329 cv
693.597 273.993 693.885 273.729 694.233 273.549 cv
694.581 273.369 694.965 273.273 695.385 273.273 cv
696.261 273.273 696.957 273.549 697.461 274.077 cv
697.965 274.605 698.229 275.337 698.229 276.249 cv
698.229 277.149 697.953 277.869 697.425 278.409 cv
696.897 278.949 696.189 279.213 695.313 279.213 cv
694.305 279.213 693.525 278.829 692.997 278.061 cv
692.457 277.293 692.193 276.165 692.193 274.689 cv
692.193 273.309 692.517 272.205 693.177 271.389 cv
693.825 270.573 694.713 270.153 695.817 270.153 cv
696.105 270.153 696.405 270.189 696.717 270.237 cv
697.017 270.297 697.329 270.381 697.665 270.501 cv
f
699.573 275.289 mo
702.729 275.289 li
702.729 276.249 li
699.573 276.249 li
699.573 275.289 li
f
703.82 272.493 mo
704.9 272.493 li
706.244 277.617 li
707.588 272.493 li
708.86 272.493 li
710.204 277.617 li
711.548 272.493 li
712.628 272.493 li
710.912 279.057 li
709.64 279.057 li
708.224 273.681 li
706.808 279.057 li
705.536 279.057 li
703.82 272.493 li
f
717.248 275.757 mo
716.372 275.757 715.772 275.865 715.436 276.057 cv
715.1 276.261 714.932 276.597 714.932 277.077 cv
714.932 277.461 715.052 277.773 715.304 277.989 cv
715.556 278.217 715.904 278.325 716.336 278.325 cv
716.936 278.325 717.416 278.121 717.776 277.689 cv
718.136 277.269 718.316 276.705 718.316 275.997 cv
718.316 275.757 li
717.248 275.757 li
719.396 275.313 mo
719.396 279.057 li
718.316 279.057 li
718.316 278.061 li
718.064 278.469 717.752 278.757 717.392 278.937 cv
717.032 279.117 716.576 279.213 716.048 279.213 cv
715.376 279.213 714.836 279.033 714.44 278.661 cv
714.044 278.289 713.852 277.785 713.852 277.149 cv
713.852 276.417 714.092 275.865 714.596 275.481 cv
715.088 275.109 715.82 274.917 716.804 274.917 cv
718.316 274.917 li
718.316 274.809 li
718.316 274.317 718.148 273.933 717.824 273.657 cv
717.5 273.393 717.044 273.249 716.456 273.249 cv
716.072 273.249 715.712 273.297 715.352 273.393 cv
714.992 273.489 714.656 273.621 714.332 273.789 cv
714.332 272.793 li
714.716 272.649 715.1 272.529 715.472 272.457 cv
715.844 272.385 716.204 272.337 716.564 272.337 cv
717.512 272.337 718.22 272.589 718.688 273.081 cv
719.156 273.573 719.396 274.317 719.396 275.313 cv
f
724.352 279.657 mo
724.04 280.425 723.74 280.941 723.452 281.181 cv
723.164 281.421 722.78 281.541 722.3 281.541 cv
721.436 281.541 li
721.436 280.641 li
722.072 280.641 li
722.36 280.641 722.588 280.569 722.756 280.425 cv
722.924 280.281 723.104 279.957 723.308 279.429 cv
723.5 278.949 li
720.848 272.493 li
721.988 272.493 li
724.04 277.629 li
726.092 272.493 li
727.232 272.493 li
724.352 279.657 li
f
58.464 265.932 mo
62.464 265.932 li
f
58.464 265.932 mo
62.464 265.932 li
@
708.876 265.932 mo
704.876 265.932 li
f
708.876 265.932 mo
704.876 265.932 li
@
40.78 261.276 mo
40.168 261.276 39.712 261.576 39.4 262.176 cv
39.088 262.776 38.944 263.676 38.944 264.876 cv
38.944 266.076 39.088 266.976 39.4 267.576 cv
39.712 268.176 40.168 268.476 40.78 268.476 cv
41.392 268.476 41.848 268.176 42.16 267.576 cv
42.46 266.976 42.616 266.076 42.616 264.876 cv
42.616 263.676 42.46 262.776 42.16 262.176 cv
41.848 261.576 41.392 261.276 40.78 261.276 cv
40.78 260.34 mo
41.752 260.34 42.496 260.736 43.024 261.504 cv
43.54 262.284 43.804 263.412 43.804 264.876 cv
43.804 266.352 43.54 267.48 43.024 268.248 cv
42.496 269.016 41.752 269.4 40.78 269.4 cv
39.796 269.4 39.04 269.016 38.524 268.248 cv
38.008 267.48 37.756 266.352 37.756 264.876 cv
37.756 263.412 38.008 262.284 38.524 261.504 cv
39.04 260.736 39.796 260.34 40.78 260.34 cv
f
45.88 267.756 mo
47.116 267.756 li
47.116 269.244 li
45.88 269.244 li
45.88 267.756 li
f
52.2279 261.276 mo
51.6159 261.276 51.1599 261.576 50.8479 262.176 cv
50.5359 262.776 50.3919 263.676 50.3919 264.876 cv
50.3919 266.076 50.5359 266.976 50.8479 267.576 cv
51.1599 268.176 51.6159 268.476 52.2279 268.476 cv
52.8399 268.476 53.2959 268.176 53.6079 267.576 cv
53.9079 266.976 54.0639 266.076 54.0639 264.876 cv
54.0639 263.676 53.9079 262.776 53.6079 262.176 cv
53.2959 261.576 52.8399 261.276 52.2279 261.276 cv
52.2279 260.34 mo
53.1999 260.34 53.9439 260.736 54.4719 261.504 cv
54.9879 262.284 55.2519 263.412 55.2519 264.876 cv
55.2519 266.352 54.9879 267.48 54.4719 268.248 cv
53.9439 269.016 53.1999 269.4 52.2279 269.4 cv
51.2439 269.4 50.4879 269.016 49.9719 268.248 cv
49.4559 267.48 49.2039 266.352 49.2039 264.876 cv
49.2039 263.412 49.4559 262.284 49.9719 261.504 cv
50.4879 260.736 51.2439 260.34 52.2279 260.34 cv
f
58.464 218.722 mo
62.464 218.722 li
f
58.464 218.722 mo
62.464 218.722 li
@
708.876 218.722 mo
704.876 218.722 li
f
708.876 218.722 mo
704.876 218.722 li
@
41.1862 214.066 mo
40.5742 214.066 40.1183 214.366 39.8063 214.966 cv
39.4943 215.566 39.3503 216.466 39.3503 217.666 cv
39.3503 218.866 39.4943 219.766 39.8063 220.366 cv
40.1183 220.966 40.5742 221.266 41.1862 221.266 cv
41.7983 221.266 42.2542 220.966 42.5662 220.366 cv
42.8662 219.766 43.0223 218.866 43.0223 217.666 cv
43.0223 216.466 42.8662 215.566 42.5662 214.966 cv
42.2542 214.366 41.7983 214.066 41.1862 214.066 cv
41.1862 213.13 mo
42.1582 213.13 42.9023 213.526 43.4303 214.294 cv
43.9463 215.074 44.2103 216.202 44.2103 217.666 cv
44.2103 219.142 43.9463 220.27 43.4303 221.038 cv
42.9023 221.806 42.1582 222.19 41.1862 222.19 cv
40.2023 222.19 39.4463 221.806 38.9303 221.038 cv
38.4142 220.27 38.1623 219.142 38.1623 217.666 cv
38.1623 216.202 38.4142 215.074 38.9303 214.294 cv
39.4463 213.526 40.2023 213.13 41.1862 213.13 cv
f
46.2863 220.546 mo
47.5223 220.546 li
47.5223 222.034 li
46.2863 222.034 li
46.2863 220.546 li
f
51.1222 221.038 mo
55.2502 221.038 li
55.2502 222.034 li
49.6942 222.034 li
49.6942 221.038 li
50.1382 220.582 50.7502 219.958 51.5302 219.166 cv
52.2982 218.386 52.7902 217.882 52.9942 217.654 cv
53.3782 217.234 53.6422 216.874 53.7862 216.574 cv
53.9302 216.286 54.0142 215.986 54.0142 215.698 cv
54.0142 215.242 53.8462 214.858 53.5222 214.57 cv
53.1982 214.282 52.7782 214.126 52.2502 214.126 cv
51.8782 214.126 51.4822 214.198 51.0742 214.318 cv
50.6662 214.45 50.2222 214.642 49.7542 214.906 cv
49.7542 213.706 li
50.2342 213.514 50.6782 213.37 51.0862 213.274 cv
51.4942 213.178 51.8782 213.13 52.2262 213.13 cv
53.1262 213.13 53.8462 213.358 54.3862 213.814 cv
54.9262 214.27 55.2022 214.87 55.2022 215.626 cv
55.2022 215.986 55.1302 216.334 54.9982 216.646 cv
54.8662 216.97 54.6262 217.354 54.2662 217.786 cv
54.1702 217.906 53.8582 218.23 53.3302 218.77 cv
52.8022 219.31 52.0702 220.066 51.1222 221.038 cv
f
58.464 171.511 mo
62.464 171.511 li
f
58.464 171.511 mo
62.464 171.511 li
@
708.876 171.511 mo
704.876 171.511 li
f
708.876 171.511 mo
704.876 171.511 li
@
40.655 166.856 mo
40.043 166.856 39.587 167.156 39.275 167.756 cv
38.963 168.356 38.819 169.256 38.819 170.456 cv
38.819 171.656 38.963 172.556 39.275 173.156 cv
39.587 173.756 40.043 174.056 40.655 174.056 cv
41.267 174.056 41.723 173.756 42.035 173.156 cv
42.335 172.556 42.491 171.656 42.491 170.456 cv
42.491 169.256 42.335 168.356 42.035 167.756 cv
41.723 167.156 41.267 166.856 40.655 166.856 cv
40.655 165.92 mo
41.627 165.92 42.371 166.316 42.899 167.084 cv
43.415 167.864 43.679 168.992 43.679 170.456 cv
43.679 171.932 43.415 173.06 42.899 173.828 cv
42.371 174.596 41.627 174.98 40.655 174.98 cv
39.671 174.98 38.915 174.596 38.399 173.828 cv
37.883 173.06 37.631 171.932 37.631 170.456 cv
37.631 168.992 37.883 167.864 38.399 167.084 cv
38.915 166.316 39.671 165.92 40.655 165.92 cv
f
45.755 173.336 mo
46.991 173.336 li
46.991 174.824 li
45.755 174.824 li
45.755 173.336 li
f
52.8229 167.108 mo
49.8349 171.776 li
52.8229 171.776 li
52.8229 167.108 li
52.5109 166.076 mo
53.9989 166.076 li
53.9989 171.776 li
55.2469 171.776 li
55.2469 172.76 li
53.9989 172.76 li
53.9989 174.824 li
52.8229 174.824 li
52.8229 172.76 li
48.8749 172.76 li
48.8749 171.62 li
52.5109 166.076 li
f
58.464 124.301 mo
62.464 124.301 li
f
58.464 124.301 mo
62.464 124.301 li
@
708.876 124.301 mo
704.876 124.301 li
f
708.876 124.301 mo
704.876 124.301 li
@
40.7487 119.645 mo
40.1367 119.645 39.6808 119.945 39.3688 120.545 cv
39.0568 121.145 38.9128 122.045 38.9128 123.245 cv
38.9128 124.445 39.0568 125.345 39.3688 125.945 cv
39.6808 126.545 40.1367 126.845 40.7487 126.845 cv
41.3608 126.845 41.8167 126.545 42.1287 125.945 cv
42.4287 125.345 42.5848 124.445 42.5848 123.245 cv
42.5848 122.045 42.4287 121.145 42.1287 120.545 cv
41.8167 119.945 41.3608 119.645 40.7487 119.645 cv
40.7487 118.709 mo
41.7207 118.709 42.4648 119.105 42.9928 119.873 cv
43.5088 120.653 43.7728 121.781 43.7728 123.245 cv
43.7728 124.721 43.5088 125.849 42.9928 126.617 cv
42.4648 127.385 41.7207 127.769 40.7487 127.769 cv
39.7648 127.769 39.0088 127.385 38.4928 126.617 cv
37.9767 125.849 37.7248 124.721 37.7248 123.245 cv
37.7248 121.781 37.9767 120.653 38.4928 119.873 cv
39.0088 119.105 39.7648 118.709 40.7487 118.709 cv
f
45.8488 126.125 mo
47.0848 126.125 li
47.0848 127.613 li
45.8488 127.613 li
45.8488 126.125 li
f
52.3407 122.765 mo
51.8127 122.765 51.3927 122.957 51.0807 123.317 cv
50.7687 123.677 50.6127 124.181 50.6127 124.805 cv
50.6127 125.441 50.7687 125.945 51.0807 126.305 cv
51.3927 126.665 51.8127 126.845 52.3407 126.845 cv
52.8687 126.845 53.2887 126.665 53.6007 126.305 cv
53.9127 125.945 54.0687 125.441 54.0687 124.805 cv
54.0687 124.181 53.9127 123.677 53.6007 123.317 cv
53.2887 122.957 52.8687 122.765 52.3407 122.765 cv
54.6927 119.057 mo
54.6927 120.137 li
54.3927 119.993 54.0927 119.885 53.7927 119.813 cv
53.4807 119.741 53.1807 119.705 52.8927 119.705 cv
52.1007 119.705 51.5007 119.969 51.0927 120.497 cv
50.6847 121.025 50.4447 121.829 50.3967 122.885 cv
50.6247 122.549 50.9127 122.285 51.2607 122.105 cv
51.6087 121.925 51.9927 121.829 52.4127 121.829 cv
53.2887 121.829 53.9847 122.105 54.4887 122.633 cv
54.9927 123.161 55.2567 123.893 55.2567 124.805 cv
55.2567 125.705 54.9807 126.425 54.4527 126.965 cv
53.9247 127.505 53.2167 127.769 52.3407 127.769 cv
51.3327 127.769 50.5527 127.385 50.0247 126.617 cv
49.4847 125.849 49.2207 124.721 49.2207 123.245 cv
49.2207 121.865 49.5447 120.761 50.2047 119.945 cv
50.8527 119.129 51.7407 118.709 52.8447 118.709 cv
53.1327 118.709 53.4327 118.745 53.7447 118.793 cv
54.0447 118.853 54.3567 118.937 54.6927 119.057 cv
f
58.464 77.0904 mo
62.464 77.0904 li
f
58.464 77.0904 mo
62.464 77.0904 li
@
708.876 77.0904 mo
704.876 77.0904 li
f
708.876 77.0904 mo
704.876 77.0904 li
@
40.8112 72.4349 mo
40.1992 72.4349 39.7433 72.7349 39.4313 73.3349 cv
39.1193 73.9349 38.9753 74.8349 38.9753 76.0349 cv
38.9753 77.2349 39.1193 78.1349 39.4313 78.7349 cv
39.7433 79.3349 40.1992 79.6349 40.8112 79.6349 cv
41.4233 79.6349 41.8792 79.3349 42.1912 78.7349 cv
42.4912 78.1349 42.6473 77.2349 42.6473 76.0349 cv
42.6473 74.8349 42.4912 73.9349 42.1912 73.3349 cv
41.8792 72.7349 41.4233 72.4349 40.8112 72.4349 cv
40.8112 71.4989 mo
41.7832 71.4989 42.5273 71.8949 43.0553 72.6629 cv
43.5713 73.4429 43.8353 74.5709 43.8353 76.0349 cv
43.8353 77.5109 43.5713 78.6389 43.0553 79.4069 cv
42.5273 80.1749 41.7832 80.5589 40.8112 80.5589 cv
39.8273 80.5589 39.0713 80.1749 38.5553 79.4069 cv
38.0392 78.6389 37.7873 77.5109 37.7873 76.0349 cv
37.7873 74.5709 38.0392 73.4429 38.5553 72.6629 cv
39.0713 71.8949 39.8273 71.4989 40.8112 71.4989 cv
f
45.9113 78.9149 mo
47.1473 78.9149 li
47.1473 80.4029 li
45.9113 80.4029 li
45.9113 78.9149 li
f
52.2592 76.2509 mo
51.6952 76.2509 51.2512 76.4069 50.9272 76.7069 cv
50.6032 77.0069 50.4472 77.4149 50.4472 77.9429 cv
50.4472 78.4709 50.6032 78.8909 50.9272 79.1909 cv
51.2512 79.4909 51.6952 79.6349 52.2592 79.6349 cv
52.8112 79.6349 53.2552 79.4909 53.5792 79.1789 cv
53.9032 78.8789 54.0712 78.4709 54.0712 77.9429 cv
54.0712 77.4149 53.9032 77.0069 53.5912 76.7069 cv
53.2672 76.4069 52.8232 76.2509 52.2592 76.2509 cv
51.0712 75.7469 mo
50.5672 75.6269 50.1712 75.3869 49.8832 75.0389 cv
49.5952 74.6909 49.4632 74.2709 49.4632 73.7669 cv
49.4632 73.0709 49.7032 72.5189 50.2072 72.1109 cv
50.6992 71.7029 51.3832 71.4989 52.2592 71.4989 cv
53.1232 71.4989 53.8072 71.7029 54.3112 72.1109 cv
54.8032 72.5189 55.0552 73.0709 55.0552 73.7669 cv
55.0552 74.2709 54.9112 74.6909 54.6232 75.0389 cv
54.3352 75.3869 53.9512 75.6269 53.4472 75.7469 cv
54.0112 75.8789 54.4552 76.1429 54.7792 76.5269 cv
55.0912 76.9109 55.2592 77.3909 55.2592 77.9429 cv
55.2592 78.7949 54.9952 79.4429 54.4792 79.8869 cv
53.9512 80.3429 53.2192 80.5589 52.2592 80.5589 cv
51.2872 80.5589 50.5432 80.3429 50.0272 79.8869 cv
49.5112 79.4429 49.2592 78.7949 49.2592 77.9429 cv
49.2592 77.3909 49.4152 76.9109 49.7392 76.5269 cv
50.0512 76.1429 50.4952 75.8789 51.0712 75.7469 cv
50.6392 73.8749 mo
50.6392 74.3309 50.7712 74.6909 51.0592 74.9429 cv
51.3472 75.1949 51.7432 75.3149 52.2592 75.3149 cv
52.7632 75.3149 53.1592 75.1949 53.4472 74.9429 cv
53.7352 74.6909 53.8792 74.3309 53.8792 73.8749 cv
53.8792 73.4189 53.7352 73.0709 53.4472 72.8189 cv
53.1592 72.5669 52.7632 72.4349 52.2592 72.4349 cv
51.7432 72.4349 51.3472 72.5669 51.0592 72.8189 cv
50.7712 73.0709 50.6392 73.4189 50.6392 73.8749 cv
f
58.464 29.88 mo
62.464 29.88 li
f
58.464 29.88 mo
62.464 29.88 li
@
708.876 29.88 mo
704.876 29.88 li
f
708.876 29.88 mo
704.876 29.88 li
@
38.9676 32.1965 mo
40.8996 32.1965 li
40.8996 25.5245 li
38.7996 25.9445 li
38.7996 24.8645 li
40.8876 24.4445 li
42.0756 24.4445 li
42.0756 32.1965 li
44.0076 32.1965 li
44.0076 33.1925 li
38.9676 33.1925 li
38.9676 32.1965 li
f
46.3956 31.7045 mo
47.6316 31.7045 li
47.6316 33.1925 li
46.3956 33.1925 li
46.3956 31.7045 li
f
52.7436 25.2245 mo
52.1316 25.2245 51.6756 25.5245 51.3636 26.1245 cv
51.0516 26.7245 50.9076 27.6245 50.9076 28.8245 cv
50.9076 30.0245 51.0516 30.9245 51.3636 31.5245 cv
51.6756 32.1245 52.1316 32.4245 52.7436 32.4245 cv
53.3556 32.4245 53.8116 32.1245 54.1236 31.5245 cv
54.4236 30.9245 54.5796 30.0245 54.5796 28.8245 cv
54.5796 27.6245 54.4236 26.7245 54.1236 26.1245 cv
53.8116 25.5245 53.3556 25.2245 52.7436 25.2245 cv
52.7436 24.2885 mo
53.7156 24.2885 54.4596 24.6845 54.9876 25.4525 cv
55.5036 26.2325 55.7676 27.3605 55.7676 28.8245 cv
55.7676 30.3005 55.5036 31.4285 54.9876 32.1965 cv
54.4596 32.9645 53.7156 33.3485 52.7436 33.3485 cv
51.7596 33.3485 51.0036 32.9645 50.4876 32.1965 cv
49.9716 31.4285 49.7196 30.3005 49.7196 28.8245 cv
49.7196 27.3605 49.9716 26.2325 50.4876 25.4525 cv
51.0036 24.6845 51.7596 24.2885 52.7436 24.2885 cv
f
20.8766 258.17 mo
20.9966 257.855 21.2216 257.54 21.5666 257.24 cv
21.9266 256.94 22.4066 256.64 23.0216 256.34 cv
26.0066 254.84 li
26.0066 256.43 li
23.2016 257.825 li
22.4816 258.185 21.9866 258.545 21.7466 258.875 cv
21.5066 259.22 21.3866 259.685 21.3866 260.27 cv
21.3866 261.875 li
26.0066 261.875 li
26.0066 263.36 li
15.0716 263.36 li
15.0716 260.015 li
15.0716 258.77 15.3416 257.84 15.8516 257.225 cv
16.3766 256.61 17.1716 256.295 18.2216 256.295 cv
18.9116 256.295 19.4966 256.46 19.9466 256.775 cv
20.3966 257.105 20.7116 257.57 20.8766 258.17 cv
16.2866 261.875 mo
20.1716 261.875 li
20.1716 260.015 li
20.1716 259.31 20.0066 258.77 19.6766 258.41 cv
19.3466 258.05 18.8666 257.855 18.2216 257.855 cv
17.5916 257.855 17.1116 258.05 16.7816 258.41 cv
16.4516 258.77 16.2866 259.31 16.2866 260.015 cv
16.2866 261.875 li
f
15.0716 252.935 mo
15.0716 246.65 li
16.3166 246.65 li
16.3166 251.45 li
19.5416 251.45 li
19.5416 247.115 li
20.7866 247.115 li
20.7866 251.45 li
26.0066 251.45 li
26.0066 252.935 li
15.0716 252.935 li
f
16.2866 242.825 mo
24.7916 242.825 li
24.7916 241.04 li
24.7916 239.54 24.4616 238.43 23.7716 237.725 cv
23.0816 237.035 22.0016 236.675 20.5316 236.675 cv
19.0616 236.675 17.9966 237.035 17.3066 237.725 cv
16.6316 238.43 16.2866 239.54 16.2866 241.04 cv
16.2866 242.825 li
15.0716 244.31 mo
15.0716 241.265 li
15.0716 239.15 15.5216 237.59 16.3916 236.6 cv
17.2766 235.61 18.6566 235.115 20.5316 235.115 cv
22.4216 235.115 23.8016 235.625 24.6866 236.615 cv
25.5716 237.605 26.0066 239.165 26.0066 241.265 cv
26.0066 244.31 li
15.0716 244.31 li
f
17.8016 228.83 mo
17.8016 227.48 li
24.2066 225.8 li
17.8016 224.12 li
17.8016 222.53 li
24.2066 220.85 li
17.8016 219.17 li
17.8016 217.82 li
26.0066 219.965 li
26.0066 221.555 li
19.2866 223.325 li
26.0066 225.095 li
26.0066 226.685 li
17.8016 228.83 li
f
17.8016 215.78 mo
17.8016 214.43 li
26.0066 214.43 li
26.0066 215.78 li
17.8016 215.78 li
14.6066 215.78 mo
14.6066 214.43 li
16.3166 214.43 li
16.3166 215.78 li
14.6066 215.78 li
f
15.4766 210.275 mo
17.8016 210.275 li
17.8016 207.5 li
18.8516 207.5 li
18.8516 210.275 li
23.3066 210.275 li
23.9816 210.275 24.4166 210.185 24.5966 210.005 cv
24.7916 209.825 24.8816 209.45 24.8816 208.88 cv
24.8816 207.5 li
26.0066 207.5 li
26.0066 208.88 li
26.0066 209.93 25.8116 210.65 25.4216 211.04 cv
25.0316 211.43 24.3266 211.625 23.3066 211.625 cv
18.8516 211.625 li
18.8516 212.615 li
17.8016 212.615 li
17.8016 211.625 li
15.4766 211.625 li
15.4766 210.275 li
f
21.0566 198.905 mo
26.0066 198.905 li
26.0066 200.255 li
21.1016 200.255 li
20.3216 200.255 19.7516 200.42 19.3616 200.72 cv
18.9716 201.02 18.7766 201.47 18.7766 202.07 cv
18.7766 202.805 19.0166 203.375 19.4816 203.795 cv
19.9466 204.215 20.5766 204.425 21.3716 204.425 cv
26.0066 204.425 li
26.0066 205.775 li
14.6066 205.775 li
14.6066 204.425 li
19.0766 204.425 li
18.5966 204.11 18.2216 203.735 17.9816 203.285 cv
17.7416 202.85 17.6066 202.34 17.6066 201.77 cv
17.6066 200.84 17.9066 200.12 18.4916 199.64 cv
19.0766 199.16 19.9316 198.905 21.0566 198.905 cv
f
19.0466 186.05 mo
14.6066 186.05 li
14.6066 184.7 li
26.0066 184.7 li
26.0066 186.05 li
24.7766 186.05 li
25.2716 186.335 25.6316 186.695 25.8566 187.13 cv
26.0816 187.565 26.2016 188.075 26.2016 188.675 cv
26.2016 189.665 25.8116 190.475 25.0316 191.105 cv
24.2516 191.735 23.2016 192.035 21.9116 192.035 cv
20.6216 192.035 19.5866 191.735 18.7916 191.105 cv
18.0116 190.475 17.6066 189.665 17.6066 188.675 cv
17.6066 188.075 17.7266 187.565 17.9666 187.13 cv
18.2066 186.695 18.5666 186.335 19.0466 186.05 cv
21.9116 190.64 mo
22.9016 190.64 23.6816 190.445 24.2516 190.04 cv
24.8216 189.635 25.0916 189.065 25.0916 188.345 cv
25.0916 187.64 24.8216 187.085 24.2516 186.665 cv
23.6816 186.26 22.9016 186.05 21.9116 186.05 cv
20.9216 186.05 20.1566 186.26 19.5866 186.665 cv
19.0166 187.085 18.7316 187.64 18.7316 188.345 cv
18.7316 189.065 19.0166 189.635 19.5866 190.04 cv
20.1566 190.445 20.9216 190.64 21.9116 190.64 cv
f
21.5666 174.905 mo
22.2266 174.905 li
22.2266 181.1 li
23.1566 181.04 23.8766 180.77 24.3566 180.26 cv
24.8366 179.765 25.0766 179.075 25.0766 178.175 cv
25.0766 177.665 25.0166 177.155 24.8966 176.675 cv
24.7766 176.195 24.5816 175.7 24.3116 175.22 cv
25.5866 175.22 li
25.7966 175.7 25.9616 176.195 26.0516 176.705 cv
26.1416 177.215 26.2016 177.74 26.2016 178.25 cv
26.2016 179.57 25.8266 180.605 25.0766 181.37 cv
24.3266 182.135 23.2916 182.51 21.9866 182.51 cv
20.6516 182.51 19.5866 182.15 18.7916 181.43 cv
18.0116 180.71 17.6066 179.72 17.6066 178.49 cv
17.6066 177.38 17.9666 176.51 18.6716 175.865 cv
19.3916 175.235 20.3516 174.905 21.5666 174.905 cv
21.1766 176.255 mo
20.4416 176.27 19.8566 176.48 19.4066 176.87 cv
18.9716 177.275 18.7466 177.815 18.7466 178.475 cv
18.7466 179.225 18.9716 179.825 19.3916 180.275 cv
19.8116 180.725 20.4116 180.995 21.1766 181.055 cv
21.1766 176.255 li
f
21.8066 167.3 mo
20.8466 167.3 20.0816 167.51 19.5416 167.9 cv
19.0016 168.305 18.7316 168.875 18.7316 169.595 cv
18.7316 170.315 19.0016 170.885 19.5416 171.29 cv
20.0816 171.695 20.8466 171.89 21.8066 171.89 cv
22.7816 171.89 23.5316 171.695 24.0716 171.29 cv
24.6116 170.885 24.8816 170.315 24.8816 169.595 cv
24.8816 168.875 24.6116 168.305 24.0716 167.9 cv
23.5316 167.51 22.7816 167.3 21.8066 167.3 cv
24.9866 165.95 mo
26.3666 165.95 27.4016 166.265 28.0916 166.88 cv
28.7666 167.51 29.1116 168.455 29.1116 169.73 cv
29.1116 170.21 29.0666 170.645 29.0066 171.065 cv
28.9316 171.485 28.8266 171.905 28.6766 172.295 cv
27.3716 172.295 li
27.5816 171.905 27.7316 171.515 27.8366 171.125 cv
27.9416 170.735 28.0016 170.345 28.0016 169.94 cv
28.0016 169.07 27.7616 168.41 27.3116 167.96 cv
26.8466 167.525 26.1566 167.3 25.2266 167.3 cv
24.5666 167.3 li
25.0466 167.585 25.4066 167.945 25.6466 168.38 cv
25.8866 168.815 26.0066 169.325 26.0066 169.925 cv
26.0066 170.945 25.6316 171.755 24.8666 172.37 cv
24.1016 172.985 23.0816 173.285 21.8066 173.285 cv
20.5466 173.285 19.5266 172.985 18.7616 172.37 cv
17.9966 171.755 17.6066 170.945 17.6066 169.925 cv
17.6066 169.325 17.7266 168.815 17.9666 168.38 cv
18.2066 167.945 18.5666 167.585 19.0466 167.3 cv
17.8016 167.3 li
17.8016 165.95 li
24.9866 165.95 li
f
19.0616 158.42 mo
18.9716 158.57 18.9116 158.735 18.8666 158.915 cv
18.8366 159.095 18.8066 159.29 18.8066 159.5 cv
18.8066 160.265 19.0616 160.85 19.5566 161.255 cv
20.0516 161.675 20.7566 161.87 21.6866 161.87 cv
26.0066 161.87 li
26.0066 163.22 li
17.8016 163.22 li
17.8016 161.87 li
19.0766 161.87 li
18.5816 161.6 18.2066 161.225 17.9666 160.775 cv
17.7266 160.325 17.6066 159.77 17.6066 159.11 cv
17.6066 159.02 17.6216 158.915 17.6216 158.795 cv
17.6366 158.69 17.6516 158.57 17.6816 158.42 cv
19.0616 158.42 li
f
21.5666 149.99 mo
22.2266 149.99 li
22.2266 156.185 li
23.1566 156.125 23.8766 155.855 24.3566 155.345 cv
24.8366 154.85 25.0766 154.16 25.0766 153.26 cv
25.0766 152.75 25.0166 152.24 24.8966 151.76 cv
24.7766 151.28 24.5816 150.785 24.3116 150.305 cv
25.5866 150.305 li
25.7966 150.785 25.9616 151.28 26.0516 151.79 cv
26.1416 152.3 26.2016 152.825 26.2016 153.335 cv
26.2016 154.655 25.8266 155.69 25.0766 156.455 cv
24.3266 157.22 23.2916 157.595 21.9866 157.595 cv
20.6516 157.595 19.5866 157.235 18.7916 156.515 cv
18.0116 155.795 17.6066 154.805 17.6066 153.575 cv
17.6066 152.465 17.9666 151.595 18.6716 150.95 cv
19.3916 150.32 20.3516 149.99 21.5666 149.99 cv
21.1766 151.34 mo
20.4416 151.355 19.8566 151.565 19.4066 151.955 cv
18.9716 152.36 18.7466 152.9 18.7466 153.56 cv
18.7466 154.31 18.9716 154.91 19.3916 155.36 cv
19.8116 155.81 20.4116 156.08 21.1766 156.14 cv
21.1766 151.34 li
f
21.5666 140.765 mo
22.2266 140.765 li
22.2266 146.96 li
23.1566 146.9 23.8766 146.63 24.3566 146.12 cv
24.8366 145.625 25.0766 144.935 25.0766 144.035 cv
25.0766 143.525 25.0166 143.015 24.8966 142.535 cv
24.7766 142.055 24.5816 141.56 24.3116 141.08 cv
25.5866 141.08 li
25.7966 141.56 25.9616 142.055 26.0516 142.565 cv
26.1416 143.075 26.2016 143.6 26.2016 144.11 cv
26.2016 145.43 25.8266 146.465 25.0766 147.23 cv
24.3266 147.995 23.2916 148.37 21.9866 148.37 cv
20.6516 148.37 19.5866 148.01 18.7916 147.29 cv
18.0116 146.57 17.6066 145.58 17.6066 144.35 cv
17.6066 143.24 17.9666 142.37 18.6716 141.725 cv
19.3916 141.095 20.3516 140.765 21.5666 140.765 cv
21.1766 142.115 mo
20.4416 142.13 19.8566 142.34 19.4066 142.73 cv
18.9716 143.135 18.7466 143.675 18.7466 144.335 cv
18.7466 145.085 18.9716 145.685 19.3916 146.135 cv
19.8116 146.585 20.4116 146.855 21.1766 146.915 cv
21.1766 142.115 li
f
18.0416 133.325 mo
19.3166 133.325 li
19.1366 133.715 18.9866 134.105 18.8816 134.51 cv
18.7916 134.93 18.7316 135.35 18.7316 135.785 cv
18.7316 136.46 18.8366 136.97 19.0466 137.3 cv
19.2566 137.63 19.5566 137.795 19.9616 137.795 cv
20.2766 137.795 20.5166 137.675 20.6966 137.435 cv
20.8766 137.195 21.0566 136.715 21.2066 135.995 cv
21.3116 135.53 li
21.5216 134.57 21.8216 133.895 22.1816 133.49 cv
22.5566 133.1 23.0816 132.89 23.7416 132.89 cv
24.5066 132.89 25.1066 133.19 25.5416 133.79 cv
25.9916 134.39 26.2016 135.23 26.2016 136.28 cv
26.2016 136.73 26.1566 137.18 26.0816 137.66 cv
26.0066 138.14 25.8866 138.635 25.7066 139.16 cv
24.3116 139.16 li
24.5816 138.665 24.7766 138.17 24.8966 137.69 cv
25.0316 137.21 25.0916 136.73 25.0916 136.25 cv
25.0916 135.62 24.9866 135.125 24.7766 134.78 cv
24.5666 134.45 24.2516 134.27 23.8466 134.27 cv
23.4866 134.27 23.2016 134.405 23.0066 134.645 cv
22.8116 134.885 22.6166 135.425 22.4366 136.265 cv
22.3316 136.73 li
22.1516 137.57 21.8816 138.185 21.5216 138.545 cv
21.1616 138.92 20.6666 139.1 20.0216 139.1 cv
19.2566 139.1 18.6566 138.83 18.2366 138.29 cv
17.8166 137.75 17.6066 136.97 17.6066 135.95 cv
17.6066 135.455 17.6516 134.99 17.7266 134.54 cv
17.8016 134.105 17.9066 133.7 18.0416 133.325 cv
f
14.6216 122.735 mo
15.7616 123.395 16.8716 123.875 17.9666 124.19 cv
19.0616 124.52 20.1716 124.67 21.2966 124.67 cv
22.4366 124.67 23.5466 124.52 24.6416 124.19 cv
25.7516 123.875 26.8466 123.395 27.9716 122.735 cv
27.9716 123.905 li
26.8166 124.64 25.7066 125.195 24.5966 125.555 cv
23.4866 125.915 22.3916 126.095 21.2966 126.095 cv
20.2166 126.095 19.1216 125.915 18.0116 125.555 cv
16.9016 125.195 15.7766 124.655 14.6216 123.905 cv
14.6216 122.735 li
f
21.0566 113.3 mo
26.0066 113.3 li
26.0066 114.65 li
21.1016 114.65 li
20.3216 114.65 19.7516 114.815 19.3616 115.115 cv
18.9716 115.415 18.7766 115.865 18.7766 116.465 cv
18.7766 117.2 19.0166 117.77 19.4816 118.19 cv
19.9466 118.61 20.5766 118.82 21.3716 118.82 cv
26.0066 118.82 li
26.0066 120.17 li
17.8016 120.17 li
17.8016 118.82 li
19.0766 118.82 li
18.5966 118.505 18.2216 118.13 17.9816 117.68 cv
17.7416 117.245 17.6066 116.735 17.6066 116.165 cv
17.6066 115.235 17.9066 114.515 18.4916 114.035 cv
19.0766 113.555 19.9316 113.3 21.0566 113.3 cv
f
18.7466 107.435 mo
18.7466 108.155 19.0316 108.725 19.6016 109.145 cv
20.1716 109.565 20.9366 109.775 21.9116 109.775 cv
22.9016 109.775 23.6666 109.58 24.2366 109.16 cv
24.8066 108.74 25.0766 108.17 25.0766 107.435 cv
25.0766 106.715 24.8066 106.145 24.2366 105.725 cv
23.6666 105.305 22.9016 105.095 21.9116 105.095 cv
20.9516 105.095 20.1716 105.305 19.6016 105.725 cv
19.0316 106.145 18.7466 106.715 18.7466 107.435 cv
17.6066 107.435 mo
17.6066 106.265 17.9966 105.35 18.7466 104.675 cv
19.5116 104.015 20.5616 103.67 21.9116 103.67 cv
23.2616 103.67 24.3116 104.015 25.0616 104.675 cv
25.8266 105.35 26.2016 106.265 26.2016 107.435 cv
26.2016 108.62 25.8266 109.55 25.0616 110.21 cv
24.3116 110.87 23.2616 111.2 21.9116 111.2 cv
20.5616 111.2 19.5116 110.87 18.7466 110.21 cv
17.9966 109.55 17.6066 108.62 17.6066 107.435 cv
f
19.0616 96.68 mo
18.9716 96.83 18.9116 96.995 18.8666 97.175 cv
18.8366 97.355 18.8066 97.55 18.8066 97.76 cv
18.8066 98.525 19.0616 99.11 19.5566 99.515 cv
20.0516 99.935 20.7566 100.13 21.6866 100.13 cv
26.0066 100.13 li
26.0066 101.48 li
17.8016 101.48 li
17.8016 100.13 li
19.0766 100.13 li
18.5816 99.86 18.2066 99.485 17.9666 99.035 cv
17.7266 98.585 17.6066 98.03 17.6066 97.37 cv
17.6066 97.28 17.6216 97.175 17.6216 97.055 cv
17.6366 96.95 17.6516 96.83 17.6816 96.68 cv
19.0616 96.68 li
f
19.3766 88.88 mo
18.7766 88.55 18.3416 88.145 18.0416 87.68 cv
17.7566 87.215 17.6066 86.66 17.6066 86.015 cv
17.6066 85.175 17.9066 84.515 18.5066 84.05 cv
19.1066 83.585 19.9616 83.345 21.0566 83.345 cv
26.0066 83.345 li
26.0066 84.695 li
21.1016 84.695 li
20.3216 84.695 19.7366 84.845 19.3466 85.115 cv
18.9716 85.4 18.7766 85.82 18.7766 86.39 cv
18.7766 87.095 19.0166 87.65 19.4816 88.055 cv
19.9466 88.46 20.5766 88.655 21.3716 88.655 cv
26.0066 88.655 li
26.0066 90.005 li
21.1016 90.005 li
20.3216 90.005 19.7366 90.155 19.3466 90.425 cv
18.9716 90.71 18.7766 91.145 18.7766 91.715 cv
18.7766 92.405 19.0166 92.96 19.4816 93.365 cv
19.9466 93.77 20.5766 93.965 21.3716 93.965 cv
26.0066 93.965 li
26.0066 95.315 li
17.8016 95.315 li
17.8016 93.965 li
19.0766 93.965 li
18.5816 93.665 18.2066 93.29 17.9666 92.855 cv
17.7266 92.435 17.6066 91.925 17.6066 91.325 cv
17.6066 90.725 17.7566 90.23 18.0566 89.81 cv
18.3566 89.39 18.8066 89.09 19.3766 88.88 cv
f
21.8816 76.925 mo
21.8816 78.02 22.0166 78.77 22.2566 79.19 cv
22.5116 79.61 22.9316 79.82 23.5316 79.82 cv
24.0116 79.82 24.4016 79.67 24.6716 79.355 cv
24.9566 79.04 25.0916 78.605 25.0916 78.065 cv
25.0916 77.315 24.8366 76.715 24.2966 76.265 cv
23.7716 75.815 23.0666 75.59 22.1816 75.59 cv
21.8816 75.59 li
21.8816 76.925 li
21.3266 74.24 mo
26.0066 74.24 li
26.0066 75.59 li
24.7616 75.59 li
25.2716 75.905 25.6316 76.295 25.8566 76.745 cv
26.0816 77.195 26.2016 77.765 26.2016 78.425 cv
26.2016 79.265 25.9766 79.94 25.5116 80.435 cv
25.0466 80.93 24.4166 81.17 23.6216 81.17 cv
22.7066 81.17 22.0166 80.87 21.5366 80.24 cv
21.0716 79.625 20.8316 78.71 20.8316 77.48 cv
20.8316 75.59 li
20.6966 75.59 li
20.0816 75.59 19.6016 75.8 19.2566 76.205 cv
18.9266 76.61 18.7466 77.18 18.7466 77.915 cv
18.7466 78.395 18.8066 78.845 18.9266 79.295 cv
19.0466 79.745 19.2116 80.165 19.4216 80.57 cv
18.1766 80.57 li
17.9966 80.09 17.8466 79.61 17.7566 79.145 cv
17.6666 78.68 17.6066 78.23 17.6066 77.78 cv
17.6066 76.595 17.9216 75.71 18.5366 75.125 cv
19.1516 74.54 20.0816 74.24 21.3266 74.24 cv
f
14.6066 71.4649 mo
14.6066 70.1149 li
26.0066 70.1149 li
26.0066 71.4649 li
14.6066 71.4649 li
f
17.8016 67.295 mo
17.8016 65.945 li
26.0066 65.945 li
26.0066 67.295 li
17.8016 67.295 li
14.6066 67.295 mo
14.6066 65.945 li
16.3166 65.945 li
16.3166 67.295 li
14.6066 67.295 li
f
17.8016 63.7099 mo
17.8016 57.3049 li
19.0316 57.3049 li
24.9266 62.3749 li
24.9266 57.3049 li
26.0066 57.3049 li
26.0066 63.8899 li
24.7766 63.8899 li
18.8816 58.8199 li
18.8816 63.7099 li
17.8016 63.7099 li
f
21.5666 48.23 mo
22.2266 48.23 li
22.2266 54.425 li
23.1566 54.365 23.8766 54.095 24.3566 53.585 cv
24.8366 53.09 25.0766 52.4 25.0766 51.5 cv
25.0766 50.99 25.0166 50.48 24.8966 50 cv
24.7766 49.52 24.5816 49.025 24.3116 48.545 cv
25.5866 48.545 li
25.7966 49.025 25.9616 49.52 26.0516 50.03 cv
26.1416 50.54 26.2016 51.065 26.2016 51.575 cv
26.2016 52.895 25.8266 53.93 25.0766 54.695 cv
24.3266 55.46 23.2916 55.835 21.9866 55.835 cv
20.6516 55.835 19.5866 55.475 18.7916 54.755 cv
18.0116 54.035 17.6066 53.045 17.6066 51.815 cv
17.6066 50.705 17.9666 49.835 18.6716 49.19 cv
19.3916 48.56 20.3516 48.23 21.5666 48.23 cv
21.1766 49.58 mo
20.4416 49.595 19.8566 49.805 19.4066 50.195 cv
18.9716 50.6 18.7466 51.14 18.7466 51.8 cv
18.7466 52.55 18.9716 53.15 19.3916 53.6 cv
19.8116 54.05 20.4116 54.32 21.1766 54.38 cv
21.1766 49.58 li
f
19.0466 40.625 mo
14.6066 40.625 li
14.6066 39.275 li
26.0066 39.275 li
26.0066 40.625 li
24.7766 40.625 li
25.2716 40.91 25.6316 41.27 25.8566 41.705 cv
26.0816 42.14 26.2016 42.65 26.2016 43.25 cv
26.2016 44.24 25.8116 45.05 25.0316 45.68 cv
24.2516 46.31 23.2016 46.61 21.9116 46.61 cv
20.6216 46.61 19.5866 46.31 18.7916 45.68 cv
18.0116 45.05 17.6066 44.24 17.6066 43.25 cv
17.6066 42.65 17.7266 42.14 17.9666 41.705 cv
18.2066 41.27 18.5666 40.91 19.0466 40.625 cv
21.9116 45.215 mo
22.9016 45.215 23.6816 45.02 24.2516 44.615 cv
24.8216 44.21 25.0916 43.64 25.0916 42.92 cv
25.0916 42.215 24.8216 41.66 24.2516 41.24 cv
23.6816 40.835 22.9016 40.625 21.9116 40.625 cv
20.9216 40.625 20.1566 40.835 19.5866 41.24 cv
19.0166 41.66 18.7316 42.215 18.7316 42.92 cv
18.7316 43.64 19.0166 44.21 19.5866 44.615 cv
20.1566 45.02 20.9216 45.215 21.9116 45.215 cv
f
14.6216 36.71 mo
14.6216 35.54 li
15.7766 34.82 16.9016 34.265 18.0116 33.905 cv
19.1216 33.545 20.2166 33.35 21.2966 33.35 cv
22.3916 33.35 23.4866 33.545 24.5966 33.905 cv
25.7066 34.265 26.8166 34.82 27.9716 35.54 cv
27.9716 36.71 li
26.8466 36.065 25.7516 35.585 24.6416 35.255 cv
23.5466 34.94 22.4366 34.775 21.2966 34.775 cv
20.1716 34.775 19.0616 34.94 17.9666 35.255 cv
16.8716 35.585 15.7616 36.065 14.6216 36.71 cv
f
5 22.6719 mo
491.734 22.6719 li
491.734 5 li
5 5 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lj
5 22.6719 mo
491.734 22.6719 li
491.734 5 li
5 5 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
2 lc
1 lj
12 13.0938 mo
26 13.0938 li
@
gsave
8.75 16.3438 mo
15.25 16.3438 li
15.25 9.84375 li
8.75 9.84375 li
cp
clp
.5 lw
0 lc
12 16.0938 mo
12.7956 16.0938 13.5587 15.7777 14.1213 15.2151 cv
14.6839 14.6525 15 13.8894 15 13.0938 cv
15 12.2981 14.6839 11.535 14.1213 10.9724 cv
13.5587 10.4098 12.7956 10.0938 12 10.0938 cv
11.2044 10.0938 10.4413 10.4098 9.87868 10.9724 cv
9.3161 11.535 9 12.2981 9 13.0938 cv
9 13.8894 9.3161 14.6525 9.87868 15.2151 cv
10.4413 15.7777 11.2044 16.0938 12 16.0938 cv
cp
@
grestore
gsave
22.75 16.3438 mo
29.25 16.3438 li
29.25 9.84375 li
22.75 9.84375 li
cp
clp
.5 lw
0 lc
26 16.0938 mo
26.7956 16.0938 27.5587 15.7777 28.1213 15.2151 cv
28.6839 14.6525 29 13.8894 29 13.0938 cv
29 12.2981 28.6839 11.535 28.1213 10.9724 cv
27.5587 10.4098 26.7956 10.0938 26 10.0938 cv
25.2044 10.0938 24.4413 10.4098 23.8787 10.9724 cv
23.3161 11.535 23 12.2981 23 13.0938 cv
23 13.8894 23.3161 14.6525 23.8787 15.2151 cv
24.4413 15.7777 25.2044 16.0938 26 16.0938 cv
cp
@
grestore
41.87 13.8637 mo
41.87 13.2037 41.73 12.6937 41.46 12.3137 cv
41.18 11.9338 40.81 11.7437 40.34 11.7437 cv
39.86 11.7437 39.49 11.9338 39.22 12.3137 cv
38.94 12.6937 38.81 13.2037 38.81 13.8637 cv
38.81 14.5238 38.94 15.0437 39.22 15.4237 cv
39.49 15.8038 39.86 15.9838 40.34 15.9838 cv
40.81 15.9838 41.18 15.8038 41.46 15.4237 cv
41.73 15.0437 41.87 14.5238 41.87 13.8637 cv
38.81 11.9537 mo
38.99 11.6337 39.23 11.3937 39.52 11.2337 cv
39.81 11.0737 40.16 10.9937 40.56 10.9937 cv
41.22 10.9937 41.76 11.2638 42.18 11.7837 cv
42.59 12.3137 42.8 13.0037 42.8 13.8637 cv
42.8 14.7238 42.59 15.4237 42.18 15.9438 cv
41.76 16.4638 41.22 16.7237 40.56 16.7237 cv
40.16 16.7237 39.81 16.6437 39.52 16.4937 cv
39.23 16.3438 38.99 16.1038 38.81 15.7738 cv
38.81 16.5938 li
37.91 16.5938 li
37.91 8.99375 li
38.81 8.99375 li
38.81 11.9537 li
f
46.4099 11.7537 mo
45.9299 11.7537 45.5499 11.9438 45.2699 12.3237 cv
44.9899 12.7037 44.8499 13.2137 44.8499 13.8637 cv
44.8499 14.5238 44.9799 15.0337 45.2599 15.4137 cv
45.5399 15.7937 45.9199 15.9738 46.4099 15.9738 cv
46.8899 15.9738 47.2699 15.7937 47.5499 15.4137 cv
47.8299 15.0337 47.9699 14.5238 47.9699 13.8637 cv
47.9699 13.2238 47.8299 12.7037 47.5499 12.3237 cv
47.2699 11.9438 46.8899 11.7537 46.4099 11.7537 cv
46.4099 10.9937 mo
47.1899 10.9937 47.7999 11.2537 48.2499 11.7537 cv
48.6899 12.2638 48.9199 12.9637 48.9199 13.8637 cv
48.9199 14.7638 48.6899 15.4637 48.2499 15.9637 cv
47.7999 16.4737 47.1899 16.7237 46.4099 16.7237 cv
45.6199 16.7237 44.9999 16.4737 44.5599 15.9637 cv
44.1199 15.4637 43.8999 14.7638 43.8999 13.8637 cv
43.8999 12.9637 44.1199 12.2638 44.5599 11.7537 cv
44.9999 11.2537 45.6199 10.9937 46.4099 10.9937 cv
f
51.2999 9.57375 mo
51.2999 11.1237 li
53.1499 11.1237 li
53.1499 11.8237 li
51.2999 11.8237 li
51.2999 14.7937 li
51.2999 15.2437 51.3599 15.5337 51.4799 15.6537 cv
51.5999 15.7837 51.8499 15.8438 52.2299 15.8438 cv
53.1499 15.8438 li
53.1499 16.5938 li
52.2299 16.5938 li
51.5299 16.5938 51.0499 16.4638 50.7899 16.2038 cv
50.5299 15.9438 50.3999 15.4738 50.3999 14.7937 cv
50.3999 11.8237 li
49.7399 11.8237 li
49.7399 11.1237 li
50.3999 11.1237 li
50.3999 9.57375 li
51.2999 9.57375 li
f
55.2199 9.57375 mo
55.2199 11.1237 li
57.0699 11.1237 li
57.0699 11.8237 li
55.2199 11.8237 li
55.2199 14.7937 li
55.2199 15.2437 55.2799 15.5337 55.3999 15.6537 cv
55.5199 15.7837 55.7699 15.8438 56.1499 15.8438 cv
57.0699 15.8438 li
57.0699 16.5938 li
56.1499 16.5938 li
55.4499 16.5938 54.9699 16.4638 54.7099 16.2038 cv
54.4499 15.9438 54.3199 15.4738 54.3199 14.7937 cv
54.3199 11.8237 li
53.6599 11.8237 li
53.6599 11.1237 li
54.3199 11.1237 li
54.3199 9.57375 li
55.2199 9.57375 li
f
60.3699 11.7537 mo
59.8899 11.7537 59.5099 11.9438 59.2299 12.3237 cv
58.9499 12.7037 58.8099 13.2137 58.8099 13.8637 cv
58.8099 14.5238 58.9399 15.0337 59.2199 15.4137 cv
59.4999 15.7937 59.8799 15.9738 60.3699 15.9738 cv
60.8499 15.9738 61.2299 15.7937 61.5099 15.4137 cv
61.7899 15.0337 61.9299 14.5238 61.9299 13.8637 cv
61.9299 13.2238 61.7899 12.7037 61.5099 12.3237 cv
61.2299 11.9438 60.8499 11.7537 60.3699 11.7537 cv
60.3699 10.9937 mo
61.1499 10.9937 61.7599 11.2537 62.2099 11.7537 cv
62.6499 12.2638 62.8799 12.9637 62.8799 13.8637 cv
62.8799 14.7638 62.6499 15.4637 62.2099 15.9637 cv
61.7599 16.4737 61.1499 16.7237 60.3699 16.7237 cv
59.5799 16.7237 58.9599 16.4737 58.5199 15.9637 cv
58.0799 15.4637 57.8599 14.7638 57.8599 13.8637 cv
57.8599 12.9637 58.0799 12.2638 58.5199 11.7537 cv
58.9599 11.2537 59.5799 10.9937 60.3699 10.9937 cv
f
68.6299 12.1737 mo
68.8499 11.7738 69.1199 11.4837 69.4299 11.2837 cv
69.7399 11.0938 70.1099 10.9937 70.5399 10.9937 cv
71.0999 10.9937 71.5399 11.1937 71.8499 11.5938 cv
72.1599 11.9937 72.3199 12.5637 72.3199 13.2937 cv
72.3199 16.5938 li
71.4199 16.5938 li
71.4199 13.3237 li
71.4199 12.8038 71.3199 12.4137 71.1399 12.1537 cv
70.9499 11.9037 70.6699 11.7738 70.2899 11.7738 cv
69.8199 11.7738 69.4499 11.9338 69.1799 12.2437 cv
68.9099 12.5537 68.7799 12.9737 68.7799 13.5037 cv
68.7799 16.5938 li
67.8799 16.5938 li
67.8799 13.3237 li
67.8799 12.8038 67.7799 12.4137 67.5999 12.1537 cv
67.4099 11.9037 67.1199 11.7738 66.7399 11.7738 cv
66.2799 11.7738 65.9099 11.9338 65.6399 12.2437 cv
65.3699 12.5537 65.2399 12.9737 65.2399 13.5037 cv
65.2399 16.5938 li
64.3399 16.5938 li
64.3399 11.1237 li
65.2399 11.1237 li
65.2399 11.9737 li
65.4399 11.6437 65.6899 11.3937 65.9799 11.2337 cv
66.2599 11.0737 66.5999 10.9937 66.9999 10.9937 cv
67.3999 10.9937 67.7299 11.0938 68.0099 11.2937 cv
68.2899 11.4937 68.4899 11.7937 68.6299 12.1737 cv
f
73.6599 13.4537 mo
76.2899 13.4537 li
76.2899 14.2537 li
73.6599 14.2537 li
73.6599 13.4537 li
f
77.6298 14.4338 mo
77.6298 11.1237 li
78.5298 11.1237 li
78.5298 14.4037 li
78.5298 14.9237 78.6298 15.3038 78.8298 15.5638 cv
79.0298 15.8237 79.3298 15.9537 79.7398 15.9537 cv
80.2198 15.9537 80.6098 15.8038 80.8898 15.4937 cv
81.1698 15.1838 81.3098 14.7638 81.3098 14.2238 cv
81.3098 11.1237 li
82.2098 11.1237 li
82.2098 16.5938 li
81.3098 16.5938 li
81.3098 15.7537 li
81.0898 16.0938 80.8298 16.3337 80.5498 16.4937 cv
80.2598 16.6437 79.9298 16.7237 79.5498 16.7237 cv
78.9198 16.7237 78.4398 16.5338 78.1198 16.1437 cv
77.7898 15.7638 77.6298 15.1938 77.6298 14.4338 cv
f
84.9298 15.7738 mo
84.9298 18.6637 li
84.0298 18.6637 li
84.0298 11.1237 li
84.9298 11.1237 li
84.9298 11.9537 li
85.1098 11.6337 85.3498 11.3937 85.6398 11.2337 cv
85.9298 11.0737 86.2798 10.9937 86.6798 10.9937 cv
87.3398 10.9937 87.8798 11.2638 88.2998 11.7837 cv
88.7098 12.3137 88.9198 13.0037 88.9198 13.8637 cv
88.9198 14.7238 88.7098 15.4237 88.2998 15.9438 cv
87.8798 16.4638 87.3398 16.7237 86.6798 16.7237 cv
86.2798 16.7237 85.9298 16.6437 85.6398 16.4937 cv
85.3498 16.3438 85.1098 16.1038 84.9298 15.7738 cv
87.9898 13.8637 mo
87.9898 13.2037 87.8498 12.6937 87.5798 12.3137 cv
87.2998 11.9338 86.9298 11.7437 86.4598 11.7437 cv
85.9798 11.7437 85.6098 11.9338 85.3398 12.3137 cv
85.0598 12.6937 84.9298 13.2037 84.9298 13.8637 cv
84.9298 14.5238 85.0598 15.0437 85.3398 15.4237 cv
85.6098 15.8038 85.9798 15.9838 86.4598 15.9838 cv
86.9298 15.9838 87.2998 15.8038 87.5798 15.4237 cv
87.8498 15.0437 87.9898 14.5238 87.9898 13.8637 cv
f
0 lc
[1 3 ] 0 dsh
111.031 13.0938 mo
125.031 13.0938 li
@
.5 lw
[] 0 dsh
108.031 16.0938 mo
114.031 10.0938 li
108.031 10.0938 mo
114.031 16.0938 li
@
122.031 16.0938 mo
128.031 10.0938 li
122.031 10.0938 mo
128.031 16.0938 li
@
140.911 11.3337 mo
140.911 12.1737 li
140.651 12.0337 140.401 11.9338 140.141 11.8637 cv
139.881 11.7937 139.631 11.7537 139.371 11.7537 cv
138.791 11.7537 138.331 11.9438 138.011 12.3137 cv
137.691 12.6838 137.531 13.2037 137.531 13.8637 cv
137.531 14.5337 137.691 15.0538 138.011 15.4237 cv
138.331 15.7937 138.791 15.9738 139.371 15.9738 cv
139.631 15.9738 139.881 15.9438 140.141 15.8737 cv
140.401 15.8038 140.651 15.6938 140.911 15.5538 cv
140.911 16.3838 li
140.651 16.5037 140.391 16.5938 140.131 16.6437 cv
139.861 16.6938 139.571 16.7237 139.271 16.7237 cv
138.451 16.7237 137.791 16.4737 137.311 15.9537 cv
136.821 15.4438 136.581 14.7437 136.581 13.8637 cv
136.581 12.9737 136.821 12.2738 137.311 11.7638 cv
137.801 11.2537 138.471 10.9937 139.331 10.9937 cv
139.611 10.9937 139.881 11.0238 140.141 11.0837 cv
140.401 11.1437 140.661 11.2237 140.911 11.3337 cv
f
144.591 11.7537 mo
144.111 11.7537 143.731 11.9438 143.451 12.3237 cv
143.171 12.7037 143.031 13.2137 143.031 13.8637 cv
143.031 14.5238 143.161 15.0337 143.441 15.4137 cv
143.721 15.7937 144.101 15.9738 144.591 15.9738 cv
145.071 15.9738 145.451 15.7937 145.731 15.4137 cv
146.011 15.0337 146.151 14.5238 146.151 13.8637 cv
146.151 13.2238 146.011 12.7037 145.731 12.3237 cv
145.451 11.9438 145.071 11.7537 144.591 11.7537 cv
144.591 10.9937 mo
145.371 10.9937 145.981 11.2537 146.431 11.7537 cv
146.871 12.2638 147.101 12.9637 147.101 13.8637 cv
147.101 14.7638 146.871 15.4637 146.431 15.9637 cv
145.981 16.4737 145.371 16.7237 144.591 16.7237 cv
143.801 16.7237 143.181 16.4737 142.741 15.9637 cv
142.301 15.4637 142.081 14.7638 142.081 13.8637 cv
142.081 12.9637 142.301 12.2638 142.741 11.7537 cv
143.181 11.2537 143.801 10.9937 144.591 10.9937 cv
f
148.591 8.99375 mo
149.491 8.99375 li
149.491 16.5938 li
148.591 16.5938 li
148.591 8.99375 li
f
151.371 8.99375 mo
152.271 8.99375 li
152.271 16.5938 li
151.371 16.5938 li
151.371 8.99375 li
f
156.641 13.8438 mo
155.911 13.8438 155.411 13.9338 155.131 14.0938 cv
154.851 14.2638 154.711 14.5437 154.711 14.9438 cv
154.711 15.2638 154.811 15.5238 155.021 15.7037 cv
155.231 15.8938 155.521 15.9838 155.881 15.9838 cv
156.381 15.9838 156.781 15.8138 157.081 15.4537 cv
157.381 15.1038 157.531 14.6337 157.531 14.0437 cv
157.531 13.8438 li
156.641 13.8438 li
158.431 13.4738 mo
158.431 16.5938 li
157.531 16.5938 li
157.531 15.7638 li
157.321 16.1038 157.061 16.3438 156.761 16.4937 cv
156.461 16.6437 156.081 16.7237 155.641 16.7237 cv
155.081 16.7237 154.631 16.5737 154.301 16.2638 cv
153.971 15.9537 153.811 15.5337 153.811 15.0037 cv
153.811 14.3938 154.011 13.9338 154.431 13.6137 cv
154.841 13.3038 155.451 13.1437 156.271 13.1437 cv
157.531 13.1437 li
157.531 13.0538 li
157.531 12.6437 157.391 12.3237 157.121 12.0938 cv
156.851 11.8737 156.471 11.7537 155.981 11.7537 cv
155.661 11.7537 155.361 11.7937 155.061 11.8737 cv
154.761 11.9537 154.481 12.0637 154.211 12.2037 cv
154.211 11.3737 li
154.531 11.2537 154.851 11.1537 155.161 11.0938 cv
155.471 11.0337 155.771 10.9937 156.071 10.9937 cv
156.861 10.9937 157.451 11.2037 157.841 11.6137 cv
158.231 12.0238 158.431 12.6437 158.431 13.4738 cv
f
164.211 13.8637 mo
164.211 13.2037 164.071 12.6937 163.801 12.3137 cv
163.521 11.9338 163.151 11.7437 162.681 11.7437 cv
162.201 11.7437 161.831 11.9338 161.561 12.3137 cv
161.281 12.6937 161.151 13.2037 161.151 13.8637 cv
161.151 14.5238 161.281 15.0437 161.561 15.4237 cv
161.831 15.8038 162.201 15.9838 162.681 15.9838 cv
163.151 15.9838 163.521 15.8038 163.801 15.4237 cv
164.071 15.0437 164.211 14.5238 164.211 13.8637 cv
161.151 11.9537 mo
161.331 11.6337 161.571 11.3937 161.861 11.2337 cv
162.151 11.0737 162.501 10.9937 162.901 10.9937 cv
163.561 10.9937 164.101 11.2638 164.521 11.7837 cv
164.931 12.3137 165.141 13.0037 165.141 13.8637 cv
165.141 14.7238 164.931 15.4237 164.521 15.9438 cv
164.101 16.4638 163.561 16.7237 162.901 16.7237 cv
162.501 16.7237 162.151 16.6437 161.861 16.4937 cv
161.571 16.3438 161.331 16.1038 161.151 15.7738 cv
161.151 16.5938 li
160.251 16.5938 li
160.251 8.99375 li
161.151 8.99375 li
161.151 11.9537 li
f
168.751 11.7537 mo
168.271 11.7537 167.891 11.9438 167.611 12.3237 cv
167.331 12.7037 167.191 13.2137 167.191 13.8637 cv
167.191 14.5238 167.321 15.0337 167.601 15.4137 cv
167.881 15.7937 168.261 15.9738 168.751 15.9738 cv
169.231 15.9738 169.611 15.7937 169.891 15.4137 cv
170.171 15.0337 170.311 14.5238 170.311 13.8637 cv
170.311 13.2238 170.171 12.7037 169.891 12.3237 cv
169.611 11.9438 169.231 11.7537 168.751 11.7537 cv
168.751 10.9937 mo
169.531 10.9937 170.141 11.2537 170.591 11.7537 cv
171.031 12.2638 171.261 12.9637 171.261 13.8637 cv
171.261 14.7638 171.031 15.4637 170.591 15.9637 cv
170.141 16.4737 169.531 16.7237 168.751 16.7237 cv
167.961 16.7237 167.341 16.4737 166.901 15.9637 cv
166.461 15.4637 166.241 14.7638 166.241 13.8637 cv
166.241 12.9637 166.461 12.2638 166.901 11.7537 cv
167.341 11.2537 167.961 10.9937 168.751 10.9937 cv
f
175.921 11.9637 mo
175.821 11.9037 175.711 11.8637 175.591 11.8337 cv
175.471 11.8137 175.341 11.7937 175.201 11.7937 cv
174.691 11.7937 174.301 11.9637 174.031 12.2937 cv
173.751 12.6237 173.621 13.0938 173.621 13.7137 cv
173.621 16.5938 li
172.721 16.5938 li
172.721 11.1237 li
173.621 11.1237 li
173.621 11.9737 li
173.801 11.6437 174.051 11.3937 174.351 11.2337 cv
174.651 11.0737 175.021 10.9937 175.461 10.9937 cv
175.671 11.0037 li
175.741 11.0138 175.821 11.0238 175.921 11.0437 cv
175.921 11.9637 li
f
179.351 13.8438 mo
178.621 13.8438 178.121 13.9338 177.841 14.0938 cv
177.561 14.2638 177.421 14.5437 177.421 14.9438 cv
177.421 15.2638 177.521 15.5238 177.731 15.7037 cv
177.941 15.8938 178.231 15.9838 178.591 15.9838 cv
179.091 15.9838 179.491 15.8138 179.791 15.4537 cv
180.091 15.1038 180.241 14.6337 180.241 14.0437 cv
180.241 13.8438 li
179.351 13.8438 li
181.141 13.4738 mo
181.141 16.5938 li
180.241 16.5938 li
180.241 15.7638 li
180.031 16.1038 179.771 16.3438 179.471 16.4937 cv
179.171 16.6437 178.791 16.7237 178.351 16.7237 cv
177.791 16.7237 177.341 16.5737 177.011 16.2638 cv
176.681 15.9537 176.521 15.5337 176.521 15.0037 cv
176.521 14.3938 176.721 13.9338 177.141 13.6137 cv
177.551 13.3038 178.161 13.1437 178.981 13.1437 cv
180.241 13.1437 li
180.241 13.0538 li
180.241 12.6437 180.101 12.3237 179.831 12.0938 cv
179.561 11.8737 179.181 11.7537 178.691 11.7537 cv
178.371 11.7537 178.071 11.7937 177.771 11.8737 cv
177.471 11.9537 177.191 12.0637 176.921 12.2037 cv
176.921 11.3737 li
177.241 11.2537 177.561 11.1537 177.871 11.0938 cv
178.181 11.0337 178.481 10.9937 178.781 10.9937 cv
179.571 10.9937 180.161 11.2037 180.551 11.6137 cv
180.941 12.0238 181.141 12.6437 181.141 13.4738 cv
f
183.881 9.57375 mo
183.881 11.1237 li
185.731 11.1237 li
185.731 11.8237 li
183.881 11.8237 li
183.881 14.7937 li
183.881 15.2437 183.941 15.5337 184.061 15.6537 cv
184.181 15.7837 184.431 15.8438 184.811 15.8438 cv
185.731 15.8438 li
185.731 16.5938 li
184.811 16.5938 li
184.111 16.5938 183.631 16.4638 183.371 16.2038 cv
183.111 15.9438 182.981 15.4738 182.981 14.7937 cv
182.981 11.8237 li
182.321 11.8237 li
182.321 11.1237 li
182.981 11.1237 li
182.981 9.57375 li
183.881 9.57375 li
f
186.911 11.1237 mo
187.811 11.1237 li
187.811 16.5938 li
186.911 16.5938 li
186.911 11.1237 li
186.911 8.99375 mo
187.811 8.99375 li
187.811 10.1337 li
186.911 10.1337 li
186.911 8.99375 li
f
189.051 11.1237 mo
190.001 11.1237 li
191.711 15.7137 li
193.421 11.1237 li
194.371 11.1237 li
192.321 16.5938 li
191.101 16.5938 li
189.051 11.1237 li
f
200.291 13.6337 mo
200.291 14.0737 li
196.161 14.0737 li
196.201 14.6938 196.381 15.1737 196.721 15.4937 cv
197.051 15.8138 197.511 15.9738 198.111 15.9738 cv
198.451 15.9738 198.791 15.9338 199.111 15.8538 cv
199.431 15.7738 199.761 15.6438 200.081 15.4637 cv
200.081 16.3137 li
199.761 16.4538 199.431 16.5637 199.091 16.6238 cv
198.751 16.6838 198.401 16.7237 198.061 16.7237 cv
197.181 16.7237 196.491 16.4737 195.981 15.9738 cv
195.471 15.4738 195.221 14.7837 195.221 13.9137 cv
195.221 13.0238 195.461 12.3137 195.941 11.7837 cv
196.421 11.2638 197.081 10.9937 197.901 10.9937 cv
198.641 10.9937 199.221 11.2337 199.651 11.7037 cv
200.071 12.1838 200.291 12.8237 200.291 13.6337 cv
199.391 13.3737 mo
199.381 12.8837 199.241 12.4937 198.981 12.1938 cv
198.711 11.9037 198.351 11.7537 197.911 11.7537 cv
197.411 11.7537 197.011 11.9037 196.711 12.1838 cv
196.411 12.4637 196.231 12.8637 196.191 13.3737 cv
199.391 13.3737 li
f
208.871 13.8637 mo
208.871 13.2037 208.731 12.6937 208.461 12.3137 cv
208.181 11.9338 207.811 11.7437 207.341 11.7437 cv
206.861 11.7437 206.491 11.9338 206.221 12.3137 cv
205.941 12.6937 205.811 13.2037 205.811 13.8637 cv
205.811 14.5238 205.941 15.0437 206.221 15.4237 cv
206.491 15.8038 206.861 15.9838 207.341 15.9838 cv
207.811 15.9838 208.181 15.8038 208.461 15.4237 cv
208.731 15.0437 208.871 14.5238 208.871 13.8637 cv
205.811 11.9537 mo
205.991 11.6337 206.231 11.3937 206.521 11.2337 cv
206.811 11.0737 207.161 10.9937 207.561 10.9937 cv
208.221 10.9937 208.761 11.2638 209.181 11.7837 cv
209.591 12.3137 209.801 13.0037 209.801 13.8637 cv
209.801 14.7238 209.591 15.4237 209.181 15.9438 cv
208.761 16.4638 208.221 16.7237 207.561 16.7237 cv
207.161 16.7237 206.811 16.6437 206.521 16.4937 cv
206.231 16.3438 205.991 16.1038 205.811 15.7738 cv
205.811 16.5938 li
204.911 16.5938 li
204.911 8.99375 li
205.811 8.99375 li
205.811 11.9537 li
f
213.411 11.7537 mo
212.931 11.7537 212.551 11.9438 212.271 12.3237 cv
211.991 12.7037 211.851 13.2137 211.851 13.8637 cv
211.851 14.5238 211.981 15.0337 212.261 15.4137 cv
212.541 15.7937 212.921 15.9738 213.411 15.9738 cv
213.891 15.9738 214.271 15.7937 214.551 15.4137 cv
214.831 15.0337 214.971 14.5238 214.971 13.8637 cv
214.971 13.2238 214.831 12.7037 214.551 12.3237 cv
214.271 11.9438 213.891 11.7537 213.411 11.7537 cv
213.411 10.9937 mo
214.191 10.9937 214.801 11.2537 215.251 11.7537 cv
215.691 12.2638 215.921 12.9637 215.921 13.8637 cv
215.921 14.7638 215.691 15.4637 215.251 15.9637 cv
214.801 16.4737 214.191 16.7237 213.411 16.7237 cv
212.621 16.7237 212.001 16.4737 211.561 15.9637 cv
211.121 15.4637 210.901 14.7638 210.901 13.8637 cv
210.901 12.9637 211.121 12.2638 211.561 11.7537 cv
212.001 11.2537 212.621 10.9937 213.411 10.9937 cv
f
218.301 9.57375 mo
218.301 11.1237 li
220.151 11.1237 li
220.151 11.8237 li
218.301 11.8237 li
218.301 14.7937 li
218.301 15.2437 218.361 15.5337 218.481 15.6537 cv
218.601 15.7837 218.851 15.8438 219.231 15.8438 cv
220.151 15.8438 li
220.151 16.5938 li
219.231 16.5938 li
218.531 16.5938 218.051 16.4638 217.791 16.2038 cv
217.531 15.9438 217.401 15.4738 217.401 14.7937 cv
217.401 11.8237 li
216.741 11.8237 li
216.741 11.1237 li
217.401 11.1237 li
217.401 9.57375 li
218.301 9.57375 li
f
222.221 9.57375 mo
222.221 11.1237 li
224.071 11.1237 li
224.071 11.8237 li
222.221 11.8237 li
222.221 14.7937 li
222.221 15.2437 222.281 15.5337 222.401 15.6537 cv
222.521 15.7837 222.771 15.8438 223.151 15.8438 cv
224.071 15.8438 li
224.071 16.5938 li
223.151 16.5938 li
222.451 16.5938 221.971 16.4638 221.711 16.2038 cv
221.451 15.9438 221.321 15.4738 221.321 14.7937 cv
221.321 11.8237 li
220.661 11.8237 li
220.661 11.1237 li
221.321 11.1237 li
221.321 9.57375 li
222.221 9.57375 li
f
227.371 11.7537 mo
226.891 11.7537 226.511 11.9438 226.231 12.3237 cv
225.951 12.7037 225.811 13.2137 225.811 13.8637 cv
225.811 14.5238 225.941 15.0337 226.221 15.4137 cv
226.501 15.7937 226.881 15.9738 227.371 15.9738 cv
227.851 15.9738 228.231 15.7937 228.511 15.4137 cv
228.791 15.0337 228.931 14.5238 228.931 13.8637 cv
228.931 13.2238 228.791 12.7037 228.511 12.3237 cv
228.231 11.9438 227.851 11.7537 227.371 11.7537 cv
227.371 10.9937 mo
228.151 10.9937 228.761 11.2537 229.211 11.7537 cv
229.651 12.2638 229.881 12.9637 229.881 13.8637 cv
229.881 14.7638 229.651 15.4637 229.211 15.9637 cv
228.761 16.4737 228.151 16.7237 227.371 16.7237 cv
226.581 16.7237 225.961 16.4737 225.521 15.9637 cv
225.081 15.4637 224.861 14.7638 224.861 13.8637 cv
224.861 12.9637 225.081 12.2638 225.521 11.7537 cv
225.961 11.2537 226.581 10.9937 227.371 10.9937 cv
f
235.631 12.1737 mo
235.851 11.7738 236.121 11.4837 236.431 11.2837 cv
236.741 11.0938 237.111 10.9937 237.541 10.9937 cv
238.101 10.9937 238.541 11.1937 238.851 11.5938 cv
239.161 11.9937 239.321 12.5637 239.321 13.2937 cv
239.321 16.5938 li
238.421 16.5938 li
238.421 13.3237 li
238.421 12.8038 238.321 12.4137 238.141 12.1537 cv
237.951 11.9037 237.671 11.7738 237.291 11.7738 cv
236.821 11.7738 236.451 11.9338 236.181 12.2437 cv
235.911 12.5537 235.781 12.9737 235.781 13.5037 cv
235.781 16.5938 li
234.881 16.5938 li
234.881 13.3237 li
234.881 12.8038 234.781 12.4137 234.601 12.1537 cv
234.411 11.9037 234.121 11.7738 233.741 11.7738 cv
233.281 11.7738 232.911 11.9338 232.641 12.2437 cv
232.371 12.5537 232.241 12.9737 232.241 13.5037 cv
232.241 16.5938 li
231.341 16.5938 li
231.341 11.1237 li
232.241 11.1237 li
232.241 11.9737 li
232.441 11.6437 232.691 11.3937 232.981 11.2337 cv
233.261 11.0737 233.601 10.9937 234.001 10.9937 cv
234.401 10.9937 234.731 11.0938 235.011 11.2937 cv
235.291 11.4937 235.491 11.7937 235.631 12.1737 cv
f
240.661 13.4537 mo
243.291 13.4537 li
243.291 14.2537 li
240.661 14.2537 li
240.661 13.4537 li
f
244.631 14.4338 mo
244.631 11.1237 li
245.531 11.1237 li
245.531 14.4037 li
245.531 14.9237 245.631 15.3038 245.831 15.5638 cv
246.031 15.8237 246.331 15.9537 246.741 15.9537 cv
247.221 15.9537 247.611 15.8038 247.891 15.4937 cv
248.171 15.1838 248.311 14.7638 248.311 14.2238 cv
248.311 11.1237 li
249.211 11.1237 li
249.211 16.5938 li
248.311 16.5938 li
248.311 15.7537 li
248.091 16.0938 247.831 16.3337 247.551 16.4937 cv
247.261 16.6437 246.931 16.7237 246.551 16.7237 cv
245.921 16.7237 245.441 16.5338 245.121 16.1437 cv
244.791 15.7638 244.631 15.1938 244.631 14.4338 cv
f
251.931 15.7738 mo
251.931 18.6637 li
251.031 18.6637 li
251.031 11.1237 li
251.931 11.1237 li
251.931 11.9537 li
252.111 11.6337 252.351 11.3937 252.641 11.2337 cv
252.931 11.0737 253.281 10.9937 253.681 10.9937 cv
254.341 10.9937 254.881 11.2638 255.301 11.7837 cv
255.711 12.3137 255.921 13.0037 255.921 13.8637 cv
255.921 14.7238 255.711 15.4237 255.301 15.9438 cv
254.881 16.4638 254.341 16.7237 253.681 16.7237 cv
253.281 16.7237 252.931 16.6437 252.641 16.4937 cv
252.351 16.3438 252.111 16.1038 251.931 15.7738 cv
254.991 13.8637 mo
254.991 13.2037 254.851 12.6937 254.581 12.3137 cv
254.301 11.9338 253.931 11.7437 253.461 11.7437 cv
252.981 11.7437 252.611 11.9338 252.341 12.3137 cv
252.061 12.6937 251.931 13.2037 251.931 13.8637 cv
251.931 14.5238 252.061 15.0437 252.341 15.4237 cv
252.611 15.8038 252.981 15.9838 253.461 15.9838 cv
253.931 15.9838 254.301 15.8038 254.581 15.4237 cv
254.851 15.0437 254.991 14.5238 254.991 13.8637 cv
f
1 lw
[6 6 ] 0 dsh
278.953 13.0938 mo
292.953 13.0938 li
@
.5 lw
0 lj
[] 0 dsh
275.953 16.0938 mo
281.953 16.0938 li
281.953 10.0938 li
275.953 10.0938 li
cp
@
289.953 16.0938 mo
295.953 16.0938 li
295.953 10.0938 li
289.953 10.0938 li
cp
@
305.783 9.57375 mo
305.783 11.1237 li
307.633 11.1237 li
307.633 11.8237 li
305.783 11.8237 li
305.783 14.7937 li
305.783 15.2437 305.843 15.5337 305.963 15.6537 cv
306.083 15.7837 306.333 15.8438 306.713 15.8438 cv
307.633 15.8438 li
307.633 16.5938 li
306.713 16.5938 li
306.013 16.5938 305.533 16.4638 305.273 16.2038 cv
305.013 15.9438 304.883 15.4738 304.883 14.7937 cv
304.883 11.8237 li
304.223 11.8237 li
304.223 11.1237 li
304.883 11.1237 li
304.883 9.57375 li
305.783 9.57375 li
f
310.933 11.7537 mo
310.453 11.7537 310.073 11.9438 309.793 12.3237 cv
309.513 12.7037 309.373 13.2137 309.373 13.8637 cv
309.373 14.5238 309.503 15.0337 309.783 15.4137 cv
310.063 15.7937 310.443 15.9738 310.933 15.9738 cv
311.413 15.9738 311.793 15.7937 312.073 15.4137 cv
312.353 15.0337 312.493 14.5238 312.493 13.8637 cv
312.493 13.2238 312.353 12.7037 312.073 12.3237 cv
311.793 11.9438 311.413 11.7537 310.933 11.7537 cv
310.933 10.9937 mo
311.713 10.9937 312.323 11.2537 312.773 11.7537 cv
313.213 12.2638 313.443 12.9637 313.443 13.8637 cv
313.443 14.7638 313.213 15.4637 312.773 15.9637 cv
312.323 16.4737 311.713 16.7237 310.933 16.7237 cv
310.143 16.7237 309.523 16.4737 309.083 15.9637 cv
308.643 15.4637 308.423 14.7638 308.423 13.8637 cv
308.423 12.9637 308.643 12.2638 309.083 11.7537 cv
309.523 11.2537 310.143 10.9937 310.933 10.9937 cv
f
315.803 15.7738 mo
315.803 18.6637 li
314.903 18.6637 li
314.903 11.1237 li
315.803 11.1237 li
315.803 11.9537 li
315.983 11.6337 316.223 11.3937 316.513 11.2337 cv
316.803 11.0737 317.153 10.9937 317.553 10.9937 cv
318.213 10.9937 318.753 11.2638 319.173 11.7837 cv
319.583 12.3137 319.793 13.0037 319.793 13.8637 cv
319.793 14.7238 319.583 15.4237 319.173 15.9438 cv
318.753 16.4638 318.213 16.7237 317.553 16.7237 cv
317.153 16.7237 316.803 16.6437 316.513 16.4937 cv
316.223 16.3438 315.983 16.1038 315.803 15.7738 cv
318.863 13.8637 mo
318.863 13.2037 318.723 12.6937 318.453 12.3137 cv
318.173 11.9338 317.803 11.7437 317.333 11.7437 cv
316.853 11.7437 316.483 11.9338 316.213 12.3137 cv
315.933 12.6937 315.803 13.2037 315.803 13.8637 cv
315.803 14.5238 315.933 15.0437 316.213 15.4237 cv
316.483 15.8038 316.853 15.9838 317.333 15.9838 cv
317.803 15.9838 318.173 15.8038 318.453 15.4237 cv
318.723 15.0437 318.863 14.5238 318.863 13.8637 cv
f
320.833 13.4537 mo
323.463 13.4537 li
323.463 14.2537 li
320.833 14.2537 li
320.833 13.4537 li
f
328.493 11.9537 mo
328.493 8.99375 li
329.393 8.99375 li
329.393 16.5938 li
328.493 16.5938 li
328.493 15.7738 li
328.303 16.1038 328.063 16.3438 327.773 16.4937 cv
327.483 16.6437 327.143 16.7237 326.743 16.7237 cv
326.083 16.7237 325.543 16.4638 325.123 15.9438 cv
324.703 15.4237 324.503 14.7238 324.503 13.8637 cv
324.503 13.0037 324.703 12.3137 325.123 11.7837 cv
325.543 11.2638 326.083 10.9937 326.743 10.9937 cv
327.143 10.9937 327.483 11.0737 327.773 11.2337 cv
328.063 11.3937 328.303 11.6337 328.493 11.9537 cv
325.433 13.8637 mo
325.433 14.5238 325.563 15.0437 325.833 15.4237 cv
326.103 15.8038 326.483 15.9838 326.963 15.9838 cv
327.433 15.9838 327.803 15.8038 328.083 15.4237 cv
328.353 15.0437 328.493 14.5238 328.493 13.8637 cv
328.493 13.2037 328.353 12.6937 328.083 12.3137 cv
327.803 11.9338 327.433 11.7437 326.963 11.7437 cv
326.483 11.7437 326.103 11.9338 325.833 12.3137 cv
325.563 12.6937 325.433 13.2037 325.433 13.8637 cv
f
333.363 11.7537 mo
332.883 11.7537 332.503 11.9438 332.223 12.3237 cv
331.943 12.7037 331.803 13.2137 331.803 13.8637 cv
331.803 14.5238 331.933 15.0337 332.213 15.4137 cv
332.493 15.7937 332.873 15.9738 333.363 15.9738 cv
333.843 15.9738 334.223 15.7937 334.503 15.4137 cv
334.783 15.0337 334.923 14.5238 334.923 13.8637 cv
334.923 13.2238 334.783 12.7037 334.503 12.3237 cv
334.223 11.9438 333.843 11.7537 333.363 11.7537 cv
333.363 10.9937 mo
334.143 10.9937 334.753 11.2537 335.203 11.7537 cv
335.643 12.2638 335.873 12.9637 335.873 13.8637 cv
335.873 14.7638 335.643 15.4637 335.203 15.9637 cv
334.753 16.4737 334.143 16.7237 333.363 16.7237 cv
332.573 16.7237 331.953 16.4737 331.513 15.9637 cv
331.073 15.4637 330.853 14.7638 330.853 13.8637 cv
330.853 12.9637 331.073 12.2638 331.513 11.7537 cv
331.953 11.2537 332.573 10.9937 333.363 10.9937 cv
f
336.843 11.1237 mo
337.743 11.1237 li
338.863 15.3938 li
339.983 11.1237 li
341.043 11.1237 li
342.163 15.3938 li
343.283 11.1237 li
344.183 11.1237 li
342.753 16.5938 li
341.693 16.5938 li
340.513 12.1137 li
339.333 16.5938 li
338.273 16.5938 li
336.843 11.1237 li
f
350.093 13.2937 mo
350.093 16.5938 li
349.193 16.5938 li
349.193 13.3237 li
349.193 12.8038 349.083 12.4237 348.883 12.1637 cv
348.683 11.9037 348.383 11.7738 347.983 11.7738 cv
347.493 11.7738 347.113 11.9338 346.833 12.2437 cv
346.553 12.5537 346.413 12.9737 346.413 13.5037 cv
346.413 16.5938 li
345.513 16.5938 li
345.513 11.1237 li
346.413 11.1237 li
346.413 11.9737 li
346.623 11.6537 346.873 11.4037 347.173 11.2437 cv
347.463 11.0837 347.803 10.9937 348.183 10.9937 cv
348.803 10.9937 349.283 11.1937 349.603 11.5837 cv
349.923 11.9737 350.093 12.5437 350.093 13.2937 cv
f
1 lw
1 lj
[3 5 1 5 ] 0 dsh
372.828 13.0938 mo
386.828 13.0938 li
@
.5 lw
0 lj
[] 0 dsh
372.828 10.0938 mo
369.828 16.0938 li
375.828 16.0938 li
cp
@
386.828 10.0938 mo
383.828 16.0938 li
389.828 16.0938 li
cp
@
399.658 9.57375 mo
399.658 11.1237 li
401.508 11.1237 li
401.508 11.8237 li
399.658 11.8237 li
399.658 14.7937 li
399.658 15.2437 399.718 15.5337 399.838 15.6537 cv
399.958 15.7837 400.208 15.8438 400.588 15.8438 cv
401.508 15.8438 li
401.508 16.5938 li
400.588 16.5938 li
399.888 16.5938 399.408 16.4638 399.148 16.2038 cv
398.888 15.9438 398.758 15.4738 398.758 14.7937 cv
398.758 11.8237 li
398.098 11.8237 li
398.098 11.1237 li
398.758 11.1237 li
398.758 9.57375 li
399.658 9.57375 li
f
404.808 11.7537 mo
404.328 11.7537 403.948 11.9438 403.668 12.3237 cv
403.388 12.7037 403.248 13.2137 403.248 13.8637 cv
403.248 14.5238 403.378 15.0337 403.658 15.4137 cv
403.938 15.7937 404.318 15.9738 404.808 15.9738 cv
405.288 15.9738 405.668 15.7937 405.948 15.4137 cv
406.228 15.0337 406.368 14.5238 406.368 13.8637 cv
406.368 13.2238 406.228 12.7037 405.948 12.3237 cv
405.668 11.9438 405.288 11.7537 404.808 11.7537 cv
404.808 10.9937 mo
405.588 10.9937 406.198 11.2537 406.648 11.7537 cv
407.088 12.2638 407.318 12.9637 407.318 13.8637 cv
407.318 14.7638 407.088 15.4637 406.648 15.9637 cv
406.198 16.4737 405.588 16.7237 404.808 16.7237 cv
404.018 16.7237 403.398 16.4737 402.958 15.9637 cv
402.518 15.4637 402.298 14.7638 402.298 13.8637 cv
402.298 12.9637 402.518 12.2638 402.958 11.7537 cv
403.398 11.2537 404.018 10.9937 404.808 10.9937 cv
f
409.678 15.7738 mo
409.678 18.6637 li
408.778 18.6637 li
408.778 11.1237 li
409.678 11.1237 li
409.678 11.9537 li
409.858 11.6337 410.098 11.3937 410.388 11.2337 cv
410.678 11.0737 411.028 10.9937 411.428 10.9937 cv
412.088 10.9937 412.628 11.2638 413.048 11.7837 cv
413.458 12.3137 413.668 13.0037 413.668 13.8637 cv
413.668 14.7238 413.458 15.4237 413.048 15.9438 cv
412.628 16.4638 412.088 16.7237 411.428 16.7237 cv
411.028 16.7237 410.678 16.6437 410.388 16.4937 cv
410.098 16.3438 409.858 16.1038 409.678 15.7738 cv
412.738 13.8637 mo
412.738 13.2037 412.598 12.6937 412.328 12.3137 cv
412.048 11.9338 411.678 11.7437 411.208 11.7437 cv
410.728 11.7437 410.358 11.9338 410.088 12.3137 cv
409.808 12.6937 409.678 13.2037 409.678 13.8637 cv
409.678 14.5238 409.808 15.0437 410.088 15.4237 cv
410.358 15.8038 410.728 15.9838 411.208 15.9838 cv
411.678 15.9838 412.048 15.8038 412.328 15.4237 cv
412.598 15.0437 412.738 14.5238 412.738 13.8637 cv
f
414.708 13.4537 mo
417.338 13.4537 li
417.338 14.2537 li
414.708 14.2537 li
414.708 13.4537 li
f
422.368 11.9537 mo
422.368 8.99375 li
423.268 8.99375 li
423.268 16.5938 li
422.368 16.5938 li
422.368 15.7738 li
422.178 16.1038 421.938 16.3438 421.648 16.4937 cv
421.358 16.6437 421.018 16.7237 420.618 16.7237 cv
419.958 16.7237 419.418 16.4638 418.998 15.9438 cv
418.578 15.4237 418.378 14.7238 418.378 13.8637 cv
418.378 13.0037 418.578 12.3137 418.998 11.7837 cv
419.418 11.2638 419.958 10.9937 420.618 10.9937 cv
421.018 10.9937 421.358 11.0737 421.648 11.2337 cv
421.938 11.3937 422.178 11.6337 422.368 11.9537 cv
419.308 13.8637 mo
419.308 14.5238 419.438 15.0437 419.708 15.4237 cv
419.978 15.8038 420.358 15.9838 420.838 15.9838 cv
421.308 15.9838 421.678 15.8038 421.958 15.4237 cv
422.228 15.0437 422.368 14.5238 422.368 13.8637 cv
422.368 13.2037 422.228 12.6937 421.958 12.3137 cv
421.678 11.9338 421.308 11.7437 420.838 11.7437 cv
420.358 11.7437 419.978 11.9338 419.708 12.3137 cv
419.438 12.6937 419.308 13.2037 419.308 13.8637 cv
f
427.238 11.7537 mo
426.758 11.7537 426.378 11.9438 426.098 12.3237 cv
425.818 12.7037 425.678 13.2137 425.678 13.8637 cv
425.678 14.5238 425.808 15.0337 426.088 15.4137 cv
426.368 15.7937 426.748 15.9738 427.238 15.9738 cv
427.718 15.9738 428.098 15.7937 428.378 15.4137 cv
428.658 15.0337 428.798 14.5238 428.798 13.8637 cv
428.798 13.2238 428.658 12.7037 428.378 12.3237 cv
428.098 11.9438 427.718 11.7537 427.238 11.7537 cv
427.238 10.9937 mo
428.018 10.9937 428.628 11.2537 429.078 11.7537 cv
429.518 12.2638 429.748 12.9637 429.748 13.8637 cv
429.748 14.7638 429.518 15.4637 429.078 15.9637 cv
428.628 16.4737 428.018 16.7237 427.238 16.7237 cv
426.448 16.7237 425.828 16.4737 425.388 15.9637 cv
424.948 15.4637 424.728 14.7638 424.728 13.8637 cv
424.728 12.9637 424.948 12.2638 425.388 11.7537 cv
425.828 11.2537 426.448 10.9937 427.238 10.9937 cv
f
430.718 11.1237 mo
431.618 11.1237 li
432.738 15.3938 li
433.858 11.1237 li
434.918 11.1237 li
436.038 15.3938 li
437.158 11.1237 li
438.058 11.1237 li
436.628 16.5938 li
435.568 16.5938 li
434.388 12.1137 li
433.208 16.5938 li
432.148 16.5938 li
430.718 11.1237 li
f
443.968 13.2937 mo
443.968 16.5938 li
443.068 16.5938 li
443.068 13.3237 li
443.068 12.8038 442.958 12.4237 442.758 12.1637 cv
442.558 11.9037 442.258 11.7738 441.858 11.7738 cv
441.368 11.7738 440.988 11.9338 440.708 12.2437 cv
440.428 12.5537 440.288 12.9737 440.288 13.5037 cv
440.288 16.5938 li
439.388 16.5938 li
439.388 11.1237 li
440.288 11.1237 li
440.288 11.9737 li
440.498 11.6537 440.748 11.4037 441.048 11.2437 cv
441.338 11.0837 441.678 10.9937 442.058 10.9937 cv
442.678 10.9937 443.158 11.1937 443.478 11.5837 cv
443.798 11.9737 443.968 12.5437 443.968 13.2937 cv
f
445.308 13.4537 mo
447.938 13.4537 li
447.938 14.2537 li
445.308 14.2537 li
445.308 13.4537 li
f
453.918 13.2937 mo
453.918 16.5938 li
453.018 16.5938 li
453.018 13.3237 li
453.018 12.8038 452.908 12.4237 452.708 12.1637 cv
452.508 11.9037 452.208 11.7738 451.808 11.7738 cv
451.318 11.7738 450.938 11.9338 450.658 12.2437 cv
450.378 12.5537 450.238 12.9737 450.238 13.5037 cv
450.238 16.5938 li
449.338 16.5938 li
449.338 8.99375 li
450.238 8.99375 li
450.238 11.9737 li
450.448 11.6537 450.698 11.4037 450.998 11.2437 cv
451.288 11.0837 451.628 10.9937 452.008 10.9937 cv
452.628 10.9937 453.108 11.1937 453.428 11.5837 cv
453.748 11.9737 453.918 12.5437 453.918 13.2937 cv
f
458.198 13.8438 mo
457.468 13.8438 456.968 13.9338 456.688 14.0938 cv
456.408 14.2638 456.268 14.5437 456.268 14.9438 cv
456.268 15.2638 456.368 15.5238 456.578 15.7037 cv
456.788 15.8938 457.078 15.9838 457.438 15.9838 cv
457.938 15.9838 458.338 15.8138 458.638 15.4537 cv
458.938 15.1038 459.088 14.6337 459.088 14.0437 cv
459.088 13.8438 li
458.198 13.8438 li
459.988 13.4738 mo
459.988 16.5938 li
459.088 16.5938 li
459.088 15.7638 li
458.878 16.1038 458.618 16.3438 458.318 16.4937 cv
458.018 16.6437 457.638 16.7237 457.198 16.7237 cv
456.638 16.7237 456.188 16.5737 455.858 16.2638 cv
455.528 15.9537 455.368 15.5337 455.368 15.0037 cv
455.368 14.3938 455.568 13.9338 455.988 13.6137 cv
456.398 13.3038 457.008 13.1437 457.828 13.1437 cv
459.088 13.1437 li
459.088 13.0538 li
459.088 12.6437 458.948 12.3237 458.678 12.0938 cv
458.408 11.8737 458.028 11.7537 457.538 11.7537 cv
457.218 11.7537 456.918 11.7937 456.618 11.8737 cv
456.318 11.9537 456.038 12.0637 455.768 12.2037 cv
455.768 11.3737 li
456.088 11.2537 456.408 11.1537 456.718 11.0938 cv
457.028 11.0337 457.328 10.9937 457.628 10.9937 cv
458.418 10.9937 459.008 11.2037 459.398 11.6137 cv
459.788 12.0238 459.988 12.6437 459.988 13.4738 cv
f
461.838 11.1237 mo
462.738 11.1237 li
462.738 16.5938 li
461.838 16.5938 li
461.838 11.1237 li
461.838 8.99375 mo
462.738 8.99375 li
462.738 10.1337 li
461.838 10.1337 li
461.838 8.99375 li
f
468.878 12.1737 mo
469.098 11.7738 469.368 11.4837 469.678 11.2837 cv
469.988 11.0938 470.358 10.9937 470.788 10.9937 cv
471.348 10.9937 471.788 11.1937 472.098 11.5938 cv
472.408 11.9937 472.568 12.5637 472.568 13.2937 cv
472.568 16.5938 li
471.668 16.5938 li
471.668 13.3237 li
471.668 12.8038 471.568 12.4137 471.388 12.1537 cv
471.198 11.9037 470.918 11.7738 470.538 11.7738 cv
470.068 11.7738 469.698 11.9338 469.428 12.2437 cv
469.158 12.5537 469.028 12.9737 469.028 13.5037 cv
469.028 16.5938 li
468.128 16.5938 li
468.128 13.3237 li
468.128 12.8038 468.028 12.4137 467.848 12.1537 cv
467.658 11.9037 467.368 11.7738 466.988 11.7738 cv
466.528 11.7738 466.158 11.9338 465.888 12.2437 cv
465.618 12.5537 465.488 12.9737 465.488 13.5037 cv
465.488 16.5938 li
464.588 16.5938 li
464.588 11.1237 li
465.488 11.1237 li
465.488 11.9737 li
465.688 11.6437 465.938 11.3937 466.228 11.2337 cv
466.508 11.0737 466.848 10.9937 467.248 10.9937 cv
467.648 10.9937 467.978 11.0938 468.258 11.2937 cv
468.538 11.4937 468.738 11.7937 468.878 12.1737 cv
f
474.358 11.1237 mo
475.258 11.1237 li
475.258 16.5938 li
474.358 16.5938 li
474.358 11.1237 li
474.358 8.99375 mo
475.258 8.99375 li
475.258 10.1337 li
474.358 10.1337 li
474.358 8.99375 li
f
481.688 13.2937 mo
481.688 16.5938 li
480.788 16.5938 li
480.788 13.3237 li
480.788 12.8038 480.678 12.4237 480.478 12.1637 cv
480.278 11.9037 479.978 11.7738 479.578 11.7738 cv
479.088 11.7738 478.708 11.9338 478.428 12.2437 cv
478.148 12.5537 478.008 12.9737 478.008 13.5037 cv
478.008 16.5938 li
477.108 16.5938 li
477.108 11.1237 li
478.008 11.1237 li
478.008 11.9737 li
478.218 11.6537 478.468 11.4037 478.768 11.2437 cv
479.058 11.0837 479.398 10.9937 479.778 10.9937 cv
480.398 10.9937 480.878 11.1937 481.198 11.5837 cv
481.518 11.9737 481.688 12.5437 481.688 13.2937 cv
f
487.078 13.7937 mo
487.078 13.1537 486.938 12.6437 486.678 12.2837 cv
486.408 11.9237 486.028 11.7437 485.548 11.7437 cv
485.068 11.7437 484.688 11.9237 484.418 12.2837 cv
484.148 12.6437 484.018 13.1537 484.018 13.7937 cv
484.018 14.4438 484.148 14.9438 484.418 15.3038 cv
484.688 15.6637 485.068 15.8438 485.548 15.8438 cv
486.028 15.8438 486.408 15.6637 486.678 15.3038 cv
486.938 14.9438 487.078 14.4438 487.078 13.7937 cv
487.978 15.9137 mo
487.978 16.8337 487.768 17.5238 487.358 17.9837 cv
486.938 18.4338 486.308 18.6637 485.458 18.6637 cv
485.138 18.6637 484.848 18.6338 484.568 18.5938 cv
484.288 18.5438 484.008 18.4738 483.748 18.3738 cv
483.748 17.5037 li
484.008 17.6437 484.268 17.7437 484.528 17.8137 cv
484.788 17.8838 485.048 17.9237 485.318 17.9237 cv
485.898 17.9237 486.338 17.7638 486.638 17.4638 cv
486.928 17.1537 487.078 16.6938 487.078 16.0737 cv
487.078 15.6337 li
486.888 15.9537 486.648 16.1938 486.358 16.3538 cv
486.068 16.5138 485.728 16.5938 485.328 16.5938 cv
484.648 16.5938 484.108 16.3438 483.698 15.8337 cv
483.288 15.3237 483.088 14.6438 483.088 13.7937 cv
483.088 12.9537 483.288 12.2738 483.698 11.7638 cv
484.108 11.2537 484.648 10.9937 485.328 10.9937 cv
485.728 10.9937 486.068 11.0737 486.358 11.2337 cv
486.648 11.3937 486.888 11.6337 487.078 11.9537 cv
487.078 11.1237 li
487.978 11.1237 li
487.978 15.9137 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
